<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="sun">

	<!--=============== Board 시작 ============-->
	
	<!-- BoardList를 보여주기 위한 BoardVO 매핑 -->
	<resultMap id="boardList" type="com.gukmo.board.model.BoardVO">
		<id property="board_num" column="board_num"/><!-- property는 VO필드이름, column은 오라클 컬럼명 -->
		<result property="nickname" column="nickname" />
		<result property="category" column="category" />
		<result property="detail_category" column="detail_category" />
		<result property="subject" column="subject" />
		<result property="content" column="content" />
		<result property="write_date" column="write_date" />
		<result property="views" column="views" />
		<result property="profile_image" column="profile_image" />
		<result property="comment_cnt" column="comment_cnt" />
		<result property="like_cnt" column="like_cnt" />
		<result property="writer_point" column="writer_point" />
		<collection property="hashtags" column="hashtag_num" javaType="java.util.ArrayList" ofType="com.gukmo.board.model.HashtagVO">
			<id property="hashtag_num" column="hashtag_num"/>
			<result property="hashtag" column="hashtag"/>
		</collection>
	</resultMap>
	
	
	<!-- 게시판 리스트 얻기 -->
	<select id="boardList" parameterType="HashMap" resultMap="boardList">
	select V.*
	from
	 (
	 <if test='sortType == ""'>
	 select DENSE_RANK() OVER (ORDER BY C.board_num desc) rno
	 </if>
	 <if test='sortType != ""'>
	 select DENSE_RANK() OVER (ORDER BY C.${sortType} desc,C.board_num desc) rno
	 </if>
	        ,C.board_num
	        ,C.nickname
	        ,C.category
	        ,C.detail_category
	        ,C.subject
	        ,C.write_date
	        ,C.views
	        ,C.profile_image
	        ,C.comment_cnt
	        ,C.like_cnt
	        ,C.hashtag_num
	        ,C.hashtag
	        ,C.fk_board_num
	        ,D.point writer_point
	  from
	    (
	    select A.board_num,A.nickname,A.category,A.detail_category,A.subject,A.write_date,A.views,A.profile_image,A.comment_cnt,A.Like_cnt
	      ,B.hashtag_num,B.fk_board_num,B.hashtag
	    from
	       (
	       select board_num,nickname,category,detail_category,subject,write_date,views,profile_image,comment_cnt,Like_cnt
	       from tbl_board where category = '커뮤니티' and detail_category = #{detail_category}
	       <if test='searchWord != ""'>
	         and (subject like '%'|| lower(#{searchWord}) ||'%'
	         or content like '%'|| lower(#{searchWord}) ||'%')
	       </if>
	       ) A
	    left join 
	       (select a.hashtag_num, hashtag, fk_board_num from tbl_hashtag a join tbl_hashtag_board_map b on a.hashtag_num = b.hashtag_num) B
	    on A.board_num = B.fk_board_num
	    ) C
	 left join
	        (select point,nickname from tbl_member) D
	 on C.nickname = D.nickname
	 ) V
	where rno between #{startRno} and #{endRno}
	</select>
	
	
	<insert id="communityNew" parameterType="com.gukmo.board.model.BoardVO" useGeneratedKeys="true"
            keyProperty="board_num" keyColumn="board_num" ><!-- insert 후 해당 글번호 가져오기  -->
		insert into tbl_board
		values(seq_board.nextval, #{nickname}, '커뮤니티', #{detail_category}, #{subject}, #{content}, default, default, #{profile_image},default,default)
	</insert>
	
	<select id="findHashtag" parameterType="String" resultType="com.gukmo.board.model.HashtagVO">
        select *
        from tbl_hashtag
        where hashtag = #{hashtag}
    </select>
    
    <insert id="saveHashTag" parameterType="String" >
        insert into tbl_hashtag(hashtag_num, hashtag)
        values (seq_hashtag.nextval, #{hashtag})
    </insert>
    
	<update id="upHashTagCount" parameterType="Integer">
        update tbl_hashtag
        set hashtag_cnt = hashtag_cnt + 1
        where hashtag_num=#{hashtag_num}
    </update>


   <insert id="hashtagBoardMapping" parameterType="HashMap" >
        insert into tbl_hashtag_board_map(hashtag_num, fk_board_num)
        values (#{hashtag_num}, #{board_num})
    </insert>
    
    
    
	<update id="pointPlus" parameterType="HashMap">
	    update tbl_member set point = point + to_number(#{point})
	    where nickname = #{boardvo.nickname}
	</update>
	
	
	<insert id="activityLog" parameterType="HashMap">
		insert into tbl_activity (activity_num, fk_userid, fk_board_num, activity_date, subject, detail_category, division, nickname)
		values(seq_activity.nextval, #{fk_userid}, #{board_num}, default, #{boardvo.subject}, #{boardvo.detail_category}, #{division}, #{boardvo.nickname})
	</insert>
	
	
	<select id="getTotalCount" parameterType="HashMap" resultType="Integer">
		select count(*)
		from tbl_board
		where detail_category = #{detail_category}
        <if test='searchWord != "" '>
        and (subject like '%'||lower(#{searchWord})||'%'
        or content like '%'||lower(#{searchWord})||'%')
   		</if>
	</select>
	
	
	<select id="getBoardDetail" parameterType="HashMap" resultMap="boardList">
	 select C.board_num
	        ,C.nickname
	        ,C.detail_category
	        ,C.subject
	        ,C.content
            ,C.hashtag_num
	        ,C.hashtag
	  from
	    (
	    select A.board_num,A.nickname,A.detail_category,A.subject,A.content
	      ,h.hashtag_num,h.hashtag
	    from (select * from tbl_board where board_num = #{board_num}) A
	    left join (select a.hashtag_num, hashtag, fk_board_num from tbl_hashtag a join tbl_hashtag_board_map b on a.hashtag_num = b.hashtag_num) h
	    on a.board_num = h.fk_board_num
	    ) C
	</select>
	
	
	<update id="modify" parameterType="com.gukmo.board.model.BoardVO">
	    update tbl_board set detail_category = #{detail_category}
	    				   , subject = #{subject}
                           , content = #{content}
        where board_num = #{board_num}
	</update>
	
	<delete id="hashTagDel" parameterType="String">
	    delete from tbl_hashtag_board_map
	    where fk_board_num = #{board_num}
	</delete>
	
	<delete id="boardDel" parameterType="HashMap">
	    delete from tbl_board
	    where board_num = #{board_num}
	</delete>
	
	<delete id="activityDel" parameterType="HashMap">
	    delete from tbl_activity
	    where fk_board_num = #{board_num} and division = #{division}
	</delete>
	
	<update id="pointMinus" parameterType="HashMap">
	    update tbl_member set point = point-10
        where fk_userid = #{fk_userid}
	</update>
	
	
	<insert id="reportInsert" parameterType="com.gukmo.board.model.ReportVO">
		insert into tbl_board_report (report_num, fk_board_num, report_nickname, reported_nickname, simple_report_reason, detail_report_reason, report_date, report_type)
		values(seq_report.nextval, #{fk_num}, #{report_nickname}, #{reported_nickname}, #{simple_report_reason}, #{detail_report_reason}, sysdate, default)
	</insert>
	
	
	
	
	
	
	<!-- ========================================== 관리자 페이지 쿼리문(통계) ========================================  -->
	
	
   <resultMap type="HashMap" id="newBoardCnt_Map">
        <result property="write_date"   column="write_date"   javaType="String"/>
        <result property="cnt"          column="cnt"          javaType="String"/>
   </resultMap>
   
   <select id="newBoardCnt" parameterType="HashMap" resultMap="newBoardCnt_Map">
		select to_char(period, 'yyyy-mm-dd') write_date, nvl(sum(a.cnt), 0) cnt
		from
		(
		    select to_char(write_date, 'yyyy-mm-dd') write_date, count(*) cnt
		    from tbl_board
		    where category = '커뮤니티'
		    and write_date between to_date(#{fromDate}, 'yyyy-mm-dd')
		                        and to_date(#{toDate}, 'yyyy-mm-dd')
		    group by to_char(write_date, 'yyyy-mm-dd')
		)a
		, ( 
		    select to_date(#{fromDate},'yyyy-mm-dd') + level - 1 as period
		    from dual 
		    connect by level &lt;= (to_date(#{toDate},'yyyy-mm-dd') 
		                       - to_date(#{fromDate},'yyyy-mm-dd') + 1)
		) b
		where b.period = a.write_date(+)
		group by b.period
		order by b.period 
   </select>
	
	
	
	<!-- ========================================== 관리자 페이지 쿼리문(통계) ========================================  -->
	
	
	
	<!-- ========================================== 관리자 페이지 일반회원  상세페이지 쿼리문 ========================================  -->
	<resultMap type="HashMap" id="activityList_Map">
        <result property="fk_board_num"    column="fk_board_num"     javaType="String"/>
        <result property="activity_date"   column="activity_date"    javaType="String"/>
        <result property="subject"         column="subject"          javaType="String"/>
        <result property="detail_category" column="detail_category"  javaType="String"/>
        <result property="division"        column="division"         javaType="String"/>
   </resultMap>
   
   <select id="activityList" parameterType="HashMap" resultMap="activityList_Map">
	select fk_board_num, activity_date, subject, detail_category, division
	from tbl_activity 
	where fk_userid = #{userid}
	order by activity_date
   </select>
	
	
	<resultMap type="HashMap" id="activityCnt_Map">
        <result property="activity_date"    column="activity_date"     javaType="String"/>
        <result property="cnt"   column="cnt"    javaType="String"/>
   </resultMap>
   
   <select id="activityCntList" parameterType="HashMap" resultMap="activityCnt_Map">
	select  to_char(period, 'yy-mm-dd') activity_date, nvl(sum(a.cnt), 0) cnt
	from
	(
	    select to_date(activity_date, 'yyyy-mm-dd') activity_date, count(*) cnt
	    from tbl_activity
	    where fk_userid = #{userid}
	    and to_date(activity_date,'yyyy-mm-dd') between to_date(add_months(sysdate,-1),'yyyy-mm-dd')
	                                            and to_date(sysdate, 'yyyy-mm-dd')
	    group by to_date(activity_date, 'yyyy-mm-dd')
	)a
	, ( 
	    select to_date(add_months(sysdate,-1),'yyyy-mm-dd') + level - 1 as period
	    from dual 
	    connect by level &lt;= (to_date(sysdate, 'yyyy-mm-dd')) - (to_date(add_months(sysdate,-1),'yyyy-mm-dd'))
	) b
	where b.period = a.activity_date(+)
	group by b.period
	order by b.period
   </select>
	
	<!-- ========================================== 관리자 페이지 일반회원  상세페이지 쿼리문 ========================================  -->
	
	

</mapper>