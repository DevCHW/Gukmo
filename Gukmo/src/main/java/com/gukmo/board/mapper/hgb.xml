<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="hgb">

<!-- BoardList를 보여주기 위한 BoardVO 매핑 -->
   <resultMap id="boardvoMap" type="com.gukmo.board.model.BoardVO">
      <id property="board_num" column="board_num" /><!-- property는 VO필드이름, column은 오라클 컬럼명 -->
      <result property="nickname" column="nickname" />
      <result property="category" column="category" />
      <result property="detail_category" column="detail_category" />
      <result property="subject" column="subject" />
      <result property="content" column="content" />
      <result property="write_date" column="write_date" />
      <result property="views" column="views" />
      <result property="profile_image" column="profile_image" />
      <result property="comment_cnt" column="comment_cnt" />
      <result property="like_cnt" column="like_cnt" />
      <result property="writer_point" column="writer_point" />
      <result property="previoussubject" column="previoussubject" />
      <result property="previousseq" column="previousseq" />
      <result property="nextseq" column="nextseq" />
      <result property="nextsubject" column="nextsubject" />
      
      <!-- HashtagVO -->
      <collection property="hashtags" column="hashtag_num" javaType="java.util.ArrayList" ofType="com.gukmo.board.model.HashtagVO" >
         <id property="hashtag_num" column="hashtag_num"/>
         <result property="hashtag" column="hashtag"/>
         <result property="fk_board_num" column="fk_board_num"/>
      </collection>      

      <!--  CommentVO --> 
      <collection property="comment" column="comment_num" javaType="java.util.ArrayList" ofType="com.gukmo.board.model.CommentVO">
         <id property="comment_num" column="comment_num"/>         
         <result property="content" column="cmt_content"/>
         <result property="nickname" column="cmt_nickname"/>
         <result property="comment_level" column="comment_level"/>
         <result property="parent_write_nickname" column="parent_write_nickname"/>
         <result property="cmt_board_num" column="cmt_board_num"/>
         <result property="fk_comment_num" column="fk_comment_num"/>
         <result property="write_date" column="cmt_write_date"/>        
         <result property="point" column="comment_point"/>        
         <result property="comment_like_cnt" column="comment_like_cnt"/>
      </collection>
      
      <!--  LikeVO --> 
      <collection property="like" column="fk_board_num" javaType="java.util.ArrayList" ofType="com.gukmo.board.model.LikeVO">
         <id property="fk_board_num" column="fk_board_num"/>         
         <result property="fk_userid" column="fk_userid"/>
      </collection>
 
   </resultMap>
       
	<!-- 하나의 글 불러오기 -->
	<select id="getBoardDetail" parameterType="HashMap" resultMap="boardvoMap">		
		   select T.board_num,T.nickname,T.category,T.detail_category,T.subject,T.content
          ,T.write_date,T.views,T.profile_image,T.comment_cnt,T.like_cnt,T.hashtag_num
          ,T.hashtag,T.writer_point,T.previousseq,T.previoussubject, T.nextseq, T.nextsubject, 
           m.comment_num
           , m.comment_level
           , m.content as cmt_content
           , m.nickname as cmt_nickname
           , m.cmt_board_num as cmt_board_num
           , m.parent_write_nickname
           , m.fk_comment_num
           , m.write_date as cmt_write_date
           , comment_like_cnt
           , fk_board_num
		from
		(
		select * 
		from
			(
			select C.board_num
		          ,C.nickname
		          ,C.category
		          ,C.detail_category
		          ,C.subject
		          ,C.content
		          ,C.write_date
		          ,C.views
		          ,C.profile_image
		          ,C.comment_cnt
		          ,C.like_cnt
		          ,C.hashtag_num
		          ,C.hashtag
		          ,C.fk_board_num as fk_board_num
		          ,D.point writer_point
                  ,C.previousseq
                  ,C.previoussubject
                  ,C.nextseq
                  ,C.nextsubject                
		    from
				(
				select lag(A.board_num, 1) over(order by A.board_num desc) AS previousseq
		          , lag(A.subject, 1,'이전글이 없습니다') over(order by A.board_num desc) AS previoussubject
                  , lead(A.board_num, 1) over(order by A.board_num desc) AS nextseq
		          , lead(A.subject, 1,'다음글이 없습니다') over(order by A.board_num desc) AS nextsubject
                  ,A.board_num,A.nickname,A.category,A.detail_category,A.subject,A.content,A.write_date,A.views,A.profile_image,A.comment_cnt,A.Like_cnt
				  ,hashtag_num,fk_board_num,hashtag
				from
                (select * from tbl_board where detail_category= #{detail_category}) A
                left join (select a.hashtag_num, hashtag, fk_board_num from tbl_hashtag a join tbl_hashtag_board_map b on a.hashtag_num = b.hashtag_num) h
                on A.board_num = h.fk_board_num
				) C
			left join
			(select point,nickname from tbl_member) D
			on C.nickname = D.nickname
			) V			
		) T
        left join
        (select comment_num,comment_level, content, nickname, cmt_board_num, parent_write_nickname, fk_comment_num, write_date, comment_like_cnt from tbl_comment) M
        on T.board_num = M.cmt_board_num
        where t.board_num = #{board_num, jdbcType=BIGINT}
        
	</select>
	
	<!-- 상세카테고리 알아오기 -->
	<select id="getCategory" parameterType="HashMap" resultType="String">
		select detail_category
		from tbl_board
		where board_num = #{board_num}
	</select>
	
	
	<!-- === 1개글 삭제하기 === -->
	<delete id="del" parameterType="HashMap">
	    delete from tbl_board
	    where board_num = #{board_num}
	</delete>
	
	
	
	<!-- 좋아요 체크하기 -->
	<select id="likeCheck" parameterType="HashMap" resultType="Integer">
		select count(*)
		from tbl_board_like
		where fk_board_num = #{board_num} and fk_userid = #{userid}
	</select>
	
	<!-- 댓글좋아요 체크하기 -->
	<select id="comment_likeCheck" parameterType="HashMap" resultType="Integer">
		select count(*)
		from tbl_comment_like
		where fk_comment_num = #{comment_num} and fk_userid = #{userid}
	</select>

		<!-- 댓글좋아요 테이블에 delete하기 -->
	<delete id="comment_likeDelete" parameterType="HashMap">
		delete from tbl_comment_like
		where fk_comment_num = #{comment_num} and fk_userid = #{userid}
	</delete>
	
	<!-- 댓글좋아요 테이블에 insert하기  -->
	<insert id="comment_likeInsert" parameterType="HashMap">
		insert into tbl_comment_like(fk_comment_num,fk_userid)
		values(#{comment_num},#{userid})
	</insert>
	
	
	<!-- 좋아요 테이블에 delete하기 -->
	<delete id="likeDelete" parameterType="HashMap">
		delete from tbl_board_like
		where fk_board_num = #{board_num} and fk_userid = #{userid}
	</delete>
	
	
	<!-- 좋아요 테이블에 insert하기  -->
	<insert id="likeInsert" parameterType="HashMap">
		insert into tbl_board_like(fk_board_num,fk_userid)
		values(#{board_num},#{userid})
	</insert>
	

	<!-- 현재 좋아요 갯수 얻기 -->
	<select id="getLike_cnt" parameterType="HashMap" resultType="Integer">
		select like_cnt
		from tbl_board
		where board_num=#{board_num}
	</select>
	
	
	
	<!-- 좋아요 1 뺀값 업데이트 -->
	<update id="likeCntChange" parameterType="HashMap">
		update tbl_board set like_cnt=${like_cnt} where board_num=#{board_num}
	</update>
	
	<!-- 글조회수 1증가 하기 -->
	<update id="setAddReadCount" parameterType="String">
	    update tbl_board set views = views + 1
	    where board_num = #{board_num}
	</update>
	

	
	<!-- 현재 댓글좋아요 갯수 얻기 -->
	<select id="getComment_like_cnt" parameterType="HashMap" resultType="Integer">
		select comment_like_cnt
		from tbl_comment
		where comment_num=#{comment_num}
	</select>		
	
	<!-- 댓글좋아요 1 뺀값 업데이트 -->
	<update id="comment_likeCntChange" parameterType="HashMap">
		update tbl_comment set comment_like_cnt=${comment_like_cnt} where comment_num=#{comment_num}
	</update>


	
	<!-- 댓글 테이블에 insert하기  -->
	<insert id="addComment" parameterType="HashMap">
		insert into tbl_comment(comment_num, comment_level, content, nickname, parent_write_nickname, cmt_board_num, fk_comment_num, write_date)
		values(seq_comment.nextval, 0, #{content}, #{nickname}, #{parent_write_nickname}, #{cmt_board_num, jdbcType=VARCHAR}, 0, sysdate)
	</insert>
	
	<!-- tbl_board의 comment_cnt 컬럼  +1 -->
	<update id="addComment_cnt" parameterType="HashMap">
		update tbl_board set comment_cnt= comment_cnt + 1 where board_num=#{cmt_board_num}
	</update>
	
	<!-- 댓글 작성시 tbl_member에서 해당 회원  포인트 +10 -->
	<update id="addPoint" parameterType="HashMap">
		update tbl_member set point = point+10 where nickname = #{nickname}
	</update>
	
	
	
	<!-- 대댓글 테이블에 insert하기  -->
	<insert id="addComment_of_Comment" parameterType="HashMap">
		insert into tbl_comment(comment_num, comment_level, content, nickname, parent_write_nickname, cmt_board_num, fk_comment_num, write_date)
		values(seq_comment.nextval, 1, #{content}, #{nickname}, #{parent_write_nickname}, #{cmt_board_num, jdbcType=VARCHAR}, #{fk_comment_num}, sysdate)
	</insert>
   
   	<!--  기본댓글 리스트 불러오기  -->
 	<select id="getBasic_commentList" parameterType="HashMap" resultType="com.gukmo.board.model.CommentVO">		
		select comment_num, comment_level, content, C.nickname as nickname, parent_write_nickname, cmt_board_num, fk_comment_num, write_date, point
		from tbl_comment C
		join tbl_member M
		on C.nickname = M.nickname
		where comment_level = 0 and cmt_board_num = #{board_num}
		order by write_date desc
	</select>
	
	<!--  대댓글 리스트 불러오기  -->
 	<select id="getSpecial_commentList" parameterType="HashMap" resultType="com.gukmo.board.model.CommentVO">		
		select comment_num, comment_level, content, C.nickname as nickname, parent_write_nickname, cmt_board_num, fk_comment_num, write_date, point
		from tbl_comment C
		join tbl_member M
		on C.nickname = M.nickname
		where comment_level = 1 and cmt_board_num = #{board_num}
		order by write_date desc
	</select>
	
 	<delete id="commentDelete" parameterType="HashMap">		
		delete from tbl_comment
		where comment_num = #{comment_num} or fk_comment_num = #{comment_num} 
	</delete>
	
	<update id="commentEdit" parameterType="HashMap">		
		update tbl_comment
		set content = #{content}
		where comment_num = #{comment_num}
	</update>
	
	<!-- 글 상세페이지 진입시 로그인한 회원의 좋아요여부 체크하기 -->
   <select id="ilikethis" parameterType="HashMap" resultType="Integer">
      select count(*)
       from tbl_board_like
       where fk_userid = #{userid} and fk_board_num = #{board_num}
   </select>
	
	
		<!-- 글 상세페이지 진입시 로그인한 회원의 좋아요여부 체크하기 -->
	<select id="comment_ilikethis" parameterType="HashMap" resultType="Integer">
		select count(*)
	    from tbl_comment_like
	    where fk_userid = #{userid} and fk_comment_num = #{comment_num}
	</select>
	
	
	
	<insert id="addActivity" parameterType="HashMap">
		insert into tbl_activity
		values(seq_activity.nextval, #{userid}, #{cmt_board_num}, sysdate, #{subject}, #{detail_category}, '댓글작성', #{nickname} )
	</insert>
	
	
</mapper>