<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="hgb">

<!-- BoardList를 보여주기 위한 BoardVO 매핑 -->
   <resultMap id="boardvoMap" type="com.gukmo.board.model.BoardVO">
      <id property="board_num" column="board_num" /><!-- property는 VO필드이름, column은 오라클 컬럼명 -->
      <result property="nickname" column="nickname" />
      <result property="category" column="category" />
      <result property="detail_category" column="detail_category" />
      <result property="subject" column="subject" />
      <result property="content" column="content" />
      <result property="write_date" column="write_date" />
      <result property="views" column="views" />
      <result property="profile_image" column="profile_image" />
      <result property="comment_cnt" column="comment_cnt" />
      <result property="like_cnt" column="like_cnt" />
      <result property="writer_point" column="writer_point" />
      <result property="previoussubject" column="previoussubject" />
      <result property="previousseq" column="previousseq" />
      <result property="nextseq" column="nextseq" />
      <result property="nextsubject" column="nextsubject" />
      
      <!-- AcademyVO -->
      <association property="academy"  column="fk_board_num" javaType="com.gukmo.board.model.AcademyVO" resultMap="academy"/>
      <!-- CurriculumVO -->
	  <association property="curriculum"  column="fk_board_num" javaType="com.gukmo.board.model.CurriculumVO" resultMap="curriculum"/>
      
      <!-- HashtagVO -->
      <collection property="hashtags" column="hashtag_num" javaType="java.util.ArrayList" ofType="com.gukmo.board.model.HashtagVO" >
         <id property="hashtag_num" column="hashtag_num"/>
         <result property="hashtag" column="hashtag"/>
         <result property="fk_board_num" column="fk_board_num"/>
      </collection>        
      
      <!--  LikeVO --> 
      <collection property="like" column="fk_board_num" javaType="java.util.ArrayList" ofType="com.gukmo.board.model.LikeVO">
         <id property="fk_board_num" column="fk_board_num"/>         
         <result property="fk_userid" column="fk_userid"/>
      </collection>
 
   </resultMap>
   
   <!-- association 으로 선언된 AcademyVO 매핑 -->
	<resultMap id="academy" type="com.gukmo.board.model.AcademyVO">
		<id property="fk_board_num" column="fk_board_num"/><!-- property는 VO필드이름, column은 오라클 컬럼명 -->
		<result property="representative_name" column="representative_name" />
		<result property="address" column="address" />
		<result property="phone" column="phone" />
		<result property="jurisdiction" column="jurisdiction" />
		<result property="homepage" column="homepage" />
		<result property="academy_image" column="academy_image" />
	</resultMap>
	
	<!-- association 으로 선언된 CurriculumVO 매핑 -->
	<resultMap id="curriculum" type="com.gukmo.board.model.CurriculumVO">
		<id property="fk_board_num" column="fk_board_num"/><!-- property는 VO필드이름, column은 오라클 컬럼명 -->
		<result property="core_technology" column="core_technology" />
		<result property="academy_name" column="academy_name" />
		<result property="curriculum_start_date" column="curriculum_start_date" />
		<result property="curriculum_end_date" column="curriculum_end_date" />
		<result property="curriculum_period" column="curriculum_period" />
		<result property="recruitment_start_date" column="recruitment_start_date" />
		<result property="recruitment_end_date" column="recruitment_end_date" />
		<result property="recruitment_period" column="recruitment_period" />
		<result property="cnt_recruits" column="cnt_recruits" />
		<result property="join_url" column="join_url" />
	</resultMap>
       
   <!-- 하나의 글 불러오기 -->
   <select id="getBoardDetail" parameterType="HashMap" resultMap="boardvoMap">                  
          select *
        from
        (
            select *
            from
            (
                select lag(A.board_num, 1) over(order by A.board_num desc) AS previousseq
                        , lag(A.subject, 1,'이전글이 없습니다') over(order by A.board_num desc) AS previoussubject
                          , lead(A.board_num, 1) over(order by A.board_num desc) AS nextseq
                        , lead(A.subject, 1,'다음글이 없습니다') over(order by A.board_num desc) AS nextsubject
                        ,A.board_num,A.nickname,A.category,A.detail_category,A.subject,A.content,A.write_date,A.views,A.profile_image,A.comment_cnt,A.Like_cnt
                        
                from
                (select * from tbl_board where detail_category= #{detail_category}) A
            ) V
            where board_num = #{board_num}
        ) B
        left join
            (select a.hashtag_num, hashtag, fk_board_num from tbl_hashtag a  join tbl_hashtag_board_map b on a.hashtag_num = b.hashtag_num) H 
        on B.board_num = H.fk_board_num
        left join
        (select point as writer_point,nickname from tbl_member )D
        on B.nickname = D.nickname
        
        left join 
			(select fk_board_num,representative_name,address,phone,jurisdiction,homepage,academy_image from tbl_academy where fk_board_num = #{board_num}) AC
         on B.board_num = AC.fk_board_num
		 left join
		 	(
		 	select fk_board_num,
		 		   (curriculum_end_date - curriculum_start_date) curriculum_period,
		 		   (recruitment_end_date - recruitment_start_date) recruitment_period,
	               core_technology,
	               academy_name,
	               to_char(curriculum_start_date,'yyyy-mm-dd') curriculum_start_date,
	               to_char(curriculum_end_date,'yyyy-mm-dd') curriculum_end_date,
	               to_char(recruitment_start_date,'yyyy-mm-dd') recruitment_start_date,
	               to_char(recruitment_end_date,'yyyy-mm-dd') recruitment_end_date,
	               cnt_recruits,
	               join_url
        	from tbl_curriculum 
		 	where fk_board_num = #{board_num}
		 	) CU
	 	 on B.board_num = CU.fk_board_num
        where B.board_num = #{board_num, jdbcType=BIGINT}
        
        
   </select>
   
   <!-- 상세카테고리 알아오기 -->
   <select id="getCategory" parameterType="HashMap" resultType="String">
      select detail_category
      from tbl_board
      where board_num = #{board_num}
   </select>
   
   
   <!-- === 1개글 삭제하기 === -->
   <delete id="del" parameterType="HashMap">
       delete from tbl_board
       where board_num = #{board_num}
   </delete>
   
   
   
   <!-- 좋아요 체크하기 -->
   <select id="likeCheck" parameterType="HashMap" resultType="Integer">
      select count(*)
      from tbl_board_like
      where fk_board_num = #{board_num} and fk_userid = #{userid}
   </select>
   
   <!-- 댓글좋아요 체크하기 -->
   <select id="comment_likeCheck" parameterType="HashMap" resultType="Integer">
      select count(*)
      from tbl_comment_like
      where fk_comment_num = #{comment_num} and fk_userid = #{userid}
   </select>
   
   <!-- 댓글좋아요 체크하기 -->
   <select id="big_comment_likeCheck" parameterType="HashMap" resultType="Integer">
      select count(*)
      from tbl_comment_like
      where fk_comment_num = #{comment_num} and fk_userid = #{userid}
   </select>

   <!-- 댓글좋아요 테이블에 delete하기 -->
   <delete id="comment_likeDelete" parameterType="HashMap">
      delete from tbl_comment_like
      where fk_comment_num = #{comment_num} and fk_userid = #{userid}
   </delete>
   
   <!-- 댓글좋아요 테이블에 insert하기  -->
   <insert id="comment_likeInsert" parameterType="HashMap">
      insert into tbl_comment_like(fk_comment_num,fk_userid)
      values(#{comment_num}, #{userid})
   </insert>
   
   
   <!-- 좋아요 테이블에 delete하기 -->
   <delete id="likeDelete" parameterType="HashMap">
      delete from tbl_board_like
      where fk_board_num = #{board_num} and fk_userid = #{userid}
   </delete>
   
   
   <!-- 좋아요 테이블에 insert하기  -->
   <insert id="likeInsert" parameterType="HashMap">
      insert into tbl_board_like(fk_board_num,fk_userid)
      values(#{board_num},#{userid})
   </insert>
   

   <!-- 현재 좋아요 갯수 얻기 -->
   <select id="getLike_cnt" parameterType="HashMap" resultType="Integer">
      select like_cnt
      from tbl_board
      where board_num=#{board_num}
   </select>
   
   
   
   <!-- 좋아요 1 뺀값 업데이트 -->
   <update id="likeCntChange" parameterType="HashMap">
      update tbl_board set like_cnt=${like_cnt} where board_num=#{board_num}
   </update>
   
   <!-- 글조회수 1증가 하기 -->
   <update id="setAddReadCount" parameterType="String">
       update tbl_board set views = views + 1
       where board_num = #{board_num}
   </update>
   

   
   <!-- 현재 댓글좋아요 갯수 얻기 -->
   <select id="getComment_like_cnt" parameterType="HashMap" resultType="Integer">
      select comment_like_cnt
      from tbl_comment
      where comment_num=#{comment_num}
   </select>      
   
   <!-- 댓글좋아요 1 뺀값 업데이트 -->
   <update id="comment_likeCntChange" parameterType="HashMap">
      update tbl_comment set comment_like_cnt=${comment_like_cnt} where comment_num=#{comment_num}
   </update>


   
   <!-- 댓글 테이블에 insert하기  -->
   <insert id="addComment" parameterType="HashMap">
      insert into tbl_comment(comment_num, comment_level, content, nickname, parent_write_nickname, cmt_board_num, fk_comment_num, write_date)
      values(seq_comment.nextval, 0, #{content}, #{nickname}, #{parent_write_nickname}, #{cmt_board_num, jdbcType=VARCHAR}, 0, sysdate)
   </insert>
   
   <!-- tbl_board의 comment_cnt 컬럼  +1 -->
   <update id="addComment_cnt" parameterType="HashMap">
      update tbl_board set comment_cnt= comment_cnt + 1 where board_num=#{cmt_board_num}
   </update>
   
   <!-- 댓글 작성시 tbl_member에서 해당 회원  포인트 +10 -->
   <update id="addPoint" parameterType="HashMap">
      update tbl_member set point = point+10 where nickname = #{nickname}
   </update>
   
   
   
   <!-- 대댓글 테이블에 insert하기  -->
   <insert id="addComment_of_Comment" parameterType="HashMap">
      insert into tbl_comment(comment_num, comment_level, content, nickname, parent_write_nickname, cmt_board_num, fk_comment_num, write_date, blind)
      values(seq_comment.nextval, 1, #{content}, #{nickname}, #{parent_write_nickname}, #{cmt_board_num, jdbcType=VARCHAR}, #{fk_comment_num}, sysdate, default)
   </insert>
   
      <!--  기본댓글 리스트 불러오기  -->
      <select id="getBasic_commentList" parameterType="HashMap" resultType="com.gukmo.board.model.CommentVO">      
	      select *
          from (
          select comment_num, comment_level, content, nickname, parent_write_nickname, cmt_board_num, D.fk_comment_num, write_date, point, nvl(comment_of_comment_cnt,0) as comment_of_comment_cnt, comment_like_cnt, profile_image,blind
	      from
	      (
	      select comment_num, comment_level, content, C.nickname as nickname, parent_write_nickname, cmt_board_num, fk_comment_num, write_date, point, comment_like_cnt,profile_image,blind
	      from tbl_comment C
	      join tbl_member M
	      on C.nickname = M.nickname
	      where comment_level = 0 and cmt_board_num = #{board_num}
	      ) D
	       left join
	      (
	      select fk_comment_num, count(*) as comment_of_comment_cnt
	      from tbl_comment
	      where comment_level = 1 and cmt_board_num = #{board_num}
	      group by fk_comment_num
	      ) V
	      on V.fk_comment_num = D.comment_num
	      order by write_date desc 
          ) BCL
          <if test='userid != ""'>		    		    
          inner join 
          (
            select nvl2(fk_userid,'1',0)as likeExist, a.comment_num    
            from
            (select * from tbl_comment where cmt_board_num = #{board_num} and comment_level = 0) A
            left join
            (select fk_comment_num,fk_userid from tbl_comment_like where fk_userid = #{userid}) B
            on A.comment_num = B.fk_comment_num
            ) ULC
           ON BCL.comment_num = ULC.comment_num
           </if>
      </select>
   
   <!--  대댓글 리스트 불러오기  -->
    <select id="getSpecial_commentList" parameterType="HashMap" resultType="com.gukmo.board.model.CommentVO">  
      select *
      from (     
      select comment_num, comment_level, content, C.nickname as nickname, parent_write_nickname, cmt_board_num, fk_comment_num, write_date, point, comment_like_cnt, profile_image,blind
      from tbl_comment C
      join tbl_member M
      on C.nickname = M.nickname
      where comment_level = 1 and cmt_board_num = #{board_num}
      order by write_date desc
      ) SCL
      <if test='userid != ""'>		    		    
          inner join 
          (
            select nvl2(fk_userid,'1',0)as likeExist, a.comment_num    
            from
            (select * from tbl_comment where cmt_board_num = #{board_num} and comment_level = 1) A
            left join
            (select fk_comment_num,fk_userid from tbl_comment_like where fk_userid = #{userid}) B
            on A.comment_num = B.fk_comment_num
            ) ULC
           ON SCL.comment_num = ULC.comment_num
       </if>
      
   </select>
   
    <!-- 삭제될 댓글의 갯수 구해오기  --> 
	<select id="getDelCommentCnt" parameterType="HashMap" resultType="Integer">
		select count(*)
		from tbl_comment
		where comment_num = #{comment_num} or fk_comment_num = #{comment_num}
	</select>
  
      <!-- 댓글 삭제  --> 
    <delete id="commentDelete" parameterType="HashMap">      
      delete from tbl_comment
      where comment_num = #{comment_num} or fk_comment_num = #{comment_num} 
   </delete>
    
   <!-- tbl_board의 comment_cnt 컬럼에서 댓삭한 개수 삭제 -->
   <update id="board_cmt_cnt_minus" parameterType="HashMap">
      update tbl_board set comment_cnt = comment_cnt - to_number(#{result}) 
      where board_num = #{board_num}
   </update>
 
   
   <update id="commentEdit" parameterType="HashMap">      
      update tbl_comment
      set content = #{content}
      where comment_num = #{comment_num}
   </update>
   
   <!-- 글 상세페이지 진입시 로그인한 회원의 좋아요여부 체크하기 -->
   <select id="ilikethis" parameterType="HashMap" resultType="Integer">
      select count(*)
       from tbl_board_like
       where fk_userid = #{userid} and fk_board_num = #{board_num}
   </select>
   
   
      <!-- 글 상세페이지 진입시 로그인한 회원의 좋아요여부 체크하기 -->
   <select id="comment_ilikethis" parameterType="HashMap" resultType="Integer">
      select count(*)
       from tbl_comment_like
       where fk_userid = #{userid} and fk_comment_num = #{comment_num}
   </select>
   
   
   
   <insert id="addActivity" parameterType="HashMap">
      insert into tbl_activity
      values(seq_activity.nextval, #{userid}, #{cmt_board_num}, sysdate, #{subject}, #{detail_category}, '댓글작성', #{nickname} )
   </insert>
   
   <insert id="addActivityLike" parameterType="HashMap">
      insert into tbl_activity
      values(seq_activity.nextval, #{userid}, #{board_num}, sysdate, #{subject}, #{detail_category}, '게시글좋아요', #{nickname} )
   </insert>
   
   <insert id="addActivityCommentLike" parameterType="HashMap">
      insert into tbl_activity
      values(seq_activity.nextval, #{userid}, #{board_num}, sysdate, #{subject}, #{detail_category}, '댓글좋아요', #{nickname} )
   </insert>
   
   <insert id="addActivityBigCommentLike" parameterType="HashMap">
      insert into tbl_activity
      values(seq_activity.nextval, #{userid}, #{cmt_board_num}, sysdate, #{subject}, #{detail_category}, '댓글좋아요', #{nickname} )
   </insert>
   
   <select id="getAdvertisement_List" parameterType="HashMap" resultType="com.gukmo.board.model.AdVO">
   	  select * from tbl_advertisement
   	  where division = '게시판'
   </select>
   
   <update id="commentBlindGo" parameterType="HashMap">
      update tbl_comment set blind = 1 where comment_num=#{comment_num}
   </update>
   
   <update id="commentBlindBack" parameterType="HashMap">
      update tbl_comment set blind = 0 where comment_num=#{comment_num}
   </update>
   
   
</mapper>