<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="chw">
	
	<!--=============== Member 시작 ============-->
	
	
	<!-- 아이디 중복검사 -->
	<select id="idExistCheck" parameterType="String" resultType="Integer">
		select count(userid) from tbl_member_login
		where userid = #{userid}
	</select>
	
	<!-- 닉네임중복검사 -->
	<select id="nicknameExistCheck" parameterType="String" resultType="Integer">
		select count(nickname) from tbl_member
		where nickname = #{nickname}
	</select>
	
	<!-- 이메일중복검사 -->
	<select id="emailExistCheck" parameterType="String" resultType="Integer">
		select count(email) from tbl_member
		where email = #{email}
	</select>
	
	<!-- 멤버로그인테이블에 회원가입정보 insert -->
	<insert id="insert_member_login" parameterType="com.gukmo.board.model.MemberVO">
		insert into tbl_member_login(userid, passwd)
		values(#{userid}, #{passwd})
	</insert>
	
	<!-- 멤버테이블에 회원가입정보 insert -->
	<insert id="insert_member" parameterType="com.gukmo.board.model.MemberVO">
		insert into tbl_member(fk_userid, email, email_acept, username, nickname)
		values(#{userid}, #{email}, #{email_acept}, #{username}, #{nickname})
	</insert>
	
	<!-- 멤버로그인테이블에서 회원정보 다 삭제 -->
	<delete id="delete_member" parameterType="String">
		delete from tbl_member_login where userid = #{userid}
	</delete>
	
	<!-- 회원의 활동내역리스트 얻어오기 -->
	<select id="getActivities" parameterType="HashMap" resultType="com.gukmo.board.model.ActivityVO">
		select T.activity_num,T.fk_userid,T.fk_board_num,T.activity_date,T.subject,
			   T.detail_category,T.division,T.nickname
		from
		(
			select V.*,rownum rno
			from
			(
				select activity_num,
					   fk_userid,
					   fk_board_num,
					   to_char(activity_date,'yyyy-mm-dd hh:mm:ss') activity_date,
					   subject,
					   detail_category,
					   division,
					   nickname
			    from tbl_activity
			    where fk_userid = #{userid}
			) V
		) T
	    where rno between #{startRno} and #{endRno}
	</select>
	
	<!-- 회원의 활동내역 총 갯수 얻기 -->
	<select id="getTotalActivities" parameterType="HashMap" resultType="Integer">
		select count(*)
	    from tbl_activity
	    where fk_userid = #{userid} 
	</select>
	
	<!-- 이메일 값으로 userid 알아내기 -->
	<select id="getMyID" parameterType="String" resultType="String">
		select userid from tbl_member
		where email = #{email}
	</select>
	
	
	
	<!--=============== Member 끝 ============-->
	
	
	
	<!--=============== Login 시작 ============-->
	
	<!-- 로그인 성공여부 검사 -->
	<select id="userExistCheck" parameterType="HashMap" resultType="Integer">
		select count(userid) from tbl_member_login
		where userid = #{userid} and passwd = #{passwd}
	</select>
	
	<!-- 어드민 로그인 성공여부 검사 -->
	<select id="adminExistCheck" parameterType="HashMap" resultType="Integer">
		select count(admin_id) from tbl_admin_login
		where admin_id = #{userid} and passwd = #{passwd}
	</select>
	
	
	<!-- 회원의 상태 얻기 -->
	<select id="statusCheck" parameterType="String" resultType="com.gukmo.board.model.MemberVO">
		select * from tbl_member_login
		where userid = #{userid}
	</select>
	
	
	<!-- 회원의 마지막로그인날짜 얻기 -->
	<select id="getLastLoginday" parameterType="String" resultType="Integer">
		select T.*
		from
		(
		select rownum R ,V.*
		from
			(
			select trunc(sysdate-login_date) LastLoginday
			from tbl_login_record
			where fk_userid = #{userid}
			order by LastLoginday desc
			) V
		) T
		where R = 1
	</select>
	
	<!-- 회원의 상태 휴면으로 수정하기 -->
	<update id="editUserStatus_rest" parameterType="String">
		update tbl_member_login set status='휴면' where userid = #{userid}
	</update>
	
	
	<!-- 회원의 마지막비밀번호 변경날짜 얻기 -->
	<select id="getLastUpdateDay" parameterType="String" resultType="Integer">
		select trunc(sysdate-update_passwd_date)
		from tbl_member_login
		where userid = #{userid}
	</select>
	
	<!-- 회원객체 하나 얻기 -->
	<select id="getUser" parameterType="String" resultType="com.gukmo.board.model.MemberVO">
		select V.userid,
		       nvl(V.email,C.email) email,
		       nvl(V.email_acept,C.email_acept) email_acept,
		       nvl(V.nickname,C.nickname) nickname,
		       nvl(V.point,C.point) point,
		       nvl(V.join_date,C.join_date) join_date,
		       nvl(V.profile_image,C.profile_image) profile_image,
		       nvl(V.username,C.username) username,
		       C.academy_name,
		       C.company_num,
		       C.homepage,
		       C.phone
		from
			(
				select A.userid,email,email_acept,nickname,point,join_date,profile_image,username
				from
				(
				select userid from tbl_member_login 
				where userid = #{userid} 
				)A
				left join
				tbl_member B
				on A.userid = B.fk_userid
			) V
			left join
			tbl_academy_member C
		on V.userid = C.fk_userid
	</select>
	
	<!-- 로그인테이블에 로그인기록하기 -->
	<insert id="loginRecordSave" parameterType="HashMap">
		insert into tbl_login_record(login_num, fk_userid, login_ip)
		values(seq_login_record.nextval, #{userid}, #{client_ip})
	</insert>
	
	<!-- 관리자로그인테이블에 로그인기록하기 -->
	<insert id="adminloginRecordSave" parameterType="HashMap">
		insert into tbl_admin_login_record(admin_login_num, fk_admin_id, login_ip)
		values(seq_admin_login_record.nextval, #{userid}, #{client_ip})
	</insert>
	
	
	<!--=============== Login 끝 ============-->






	<!--=============== Board 시작 ============-->
	
	<!-- BoardList를 보여주기 위한 BoardVO 매핑 -->
	<resultMap id="boardList" type="com.gukmo.board.model.BoardVO">
		<id property="board_num" column="board_num"/><!-- property는 VO필드이름, column은 오라클 컬럼명 -->
		<result property="nickname" column="nickname" />
		<result property="category" column="category" />
		<result property="detail_category" column="detail_category" />
		<result property="subject" column="subject" />
		<result property="content" column="content" />
		<result property="write_date" column="write_date" />
		<result property="views" column="views" />
		<result property="profile_image" column="profile_image" />
		<result property="comment_cnt" column="comment_cnt" />
		<result property="like_cnt" column="like_cnt" />
		<result property="writer_point" column="writer_point" />
		<collection property="hashtags" column="hashtag_num" javaType="java.util.ArrayList" ofType="com.gukmo.board.model.HashtagVO">
			<id property="hashtag_num" column="hashtag_num"/>
			<result property="hashtag" column="hashtag"/>
			<result property="fk_board_num" column="fk_board_num"/>
		</collection>
	</resultMap>
	
	
	<!-- 스터디게시판 리스트 얻기 -->
	<select id="getStudies" parameterType="HashMap" resultMap="boardList">
		select T.board_num,T.nickname,T.category,T.detail_category,T.subject,T.content
		      ,T.write_date,T.views,T.profile_image,T.comment_cnt,T.like_cnt,T.hashtag_num
		      ,T.hashtag,T.writer_point
		from
		(
		select rownum rno, V.*
		from
			(
			select C.board_num
		          ,C.nickname
		          ,C.category
		          ,C.detail_category
		          ,C.subject
		          ,C.content
		          ,C.write_date
		          ,C.views
		          ,C.profile_image
		          ,C.comment_cnt
		          ,C.like_cnt
		          ,C.hashtag_num
		          ,C.hashtag
		          ,C.fk_board_num
		          ,D.point writer_point
		    from
				(
				select A.board_num,A.nickname,A.category,A.detail_category,A.subject,A.content,A.write_date,A.views,A.profile_image,A.comment_cnt,A.Like_cnt
				  ,B.hashtag_num,B.fk_board_num,B.hashtag
				from
				(select * from tbl_board where detail_category = '스터디') A
				left join tbl_hashtag B
				on A.board_num = B.fk_board_num
				) C
			left join
			(select point,nickname from tbl_member) D
			on C.nickname = D.nickname
			) V
		) T
		where rno between #{startRno} and #{endRno}
	</select>
	
	
	<!-- 스터디게시판 총 갯수 얻기 -->
	<select id="getTotalStudiesCount" parameterType="HashMap" resultType="Integer">
		select count(*)
		from tbl_board
		where detail_category='스터디'
	</select>
	
	
	
	
	
	<!-- QnA 총 갯수 얻기 -->
	<select id="getTotalQuestionsCount" parameterType="HashMap" resultType="Integer">
		select count(*)
		from tbl_board
		where detail_category='QnA'
	</select>
	
	
	<!-- QnA 리스트 얻기 -->
	<select id="getQuestions" parameterType="HashMap" resultMap="boardList">
		select T.board_num,T.nickname,T.category,T.detail_category,T.subject,T.content
		      ,T.write_date,T.views,T.profile_image,T.comment_cnt,T.like_cnt,T.hashtag_num
		      ,T.hashtag,T.writer_point
		from
		(
		select rownum rno, V.*
		from
			(
			select C.board_num
		          ,C.nickname
		          ,C.category
		          ,C.detail_category
		          ,C.subject
		          ,C.content
		          ,C.write_date
		          ,C.views
		          ,C.profile_image
		          ,C.comment_cnt
		          ,C.like_cnt
		          ,C.hashtag_num
		          ,C.hashtag
		          ,C.fk_board_num
		          ,D.point writer_point
		    from
				(
				select A.board_num,A.nickname,A.category,A.detail_category,A.subject,A.content,A.write_date,A.views,A.profile_image,A.comment_cnt,A.Like_cnt
				  ,B.hashtag_num,B.fk_board_num,B.hashtag
				from
				(select * from tbl_board where detail_category = 'QnA') A
				left join tbl_hashtag B
				on A.board_num = B.fk_board_num
				) C
			left join
			(select point,nickname from tbl_member) D
			on C.nickname = D.nickname
			) V
		) T
		where rno between #{startRno} and #{endRno}
	</select>
	
	
	
	
	<!-- 취미모임 총 갯수 얻기 -->
	<select id="getTotalHobbiesCount" parameterType="HashMap" resultType="Integer">
		select count(*)
		from tbl_board
		where detail_category='취미모임'
	</select>
	
	
	<!-- 취미모임 리스트 얻기 -->
	<select id="getHobbies" parameterType="HashMap" resultMap="boardList">
		select T.board_num,T.nickname,T.category,T.detail_category,T.subject,T.content
		      ,T.write_date,T.views,T.profile_image,T.comment_cnt,T.like_cnt,T.hashtag_num
		      ,T.hashtag,T.writer_point
		from
		(
		select rownum rno, V.*
		from
			(
			select C.board_num
		          ,C.nickname
		          ,C.category
		          ,C.detail_category
		          ,C.subject
		          ,C.content
		          ,C.write_date
		          ,C.views
		          ,C.profile_image
		          ,C.comment_cnt
		          ,C.like_cnt
		          ,C.hashtag_num
		          ,C.hashtag
		          ,C.fk_board_num
		          ,D.point writer_point
		    from
				(
				select A.board_num,A.nickname,A.category,A.detail_category,A.subject,A.content,A.write_date,A.views,A.profile_image,A.comment_cnt,A.Like_cnt
				  ,B.hashtag_num,B.fk_board_num,B.hashtag
				from
				(select * from tbl_board where detail_category = '취미모임') A
				left join tbl_hashtag B
				on A.board_num = B.fk_board_num
				) C
			left join
			(select point,nickname from tbl_member) D
			on C.nickname = D.nickname
			) V
		) T
		where rno between #{startRno} and #{endRno}
	</select>
	
	
	
	
	<!-- 수강/취업성공 총 갯수 얻기 -->
	<select id="getTotalReviewsCount" parameterType="HashMap" resultType="Integer">
		select count(*)
		from tbl_board
		where detail_category='수강/취업성공후기'
	</select>
	
	
	<!-- 수강/취업성공 리스트 얻기 -->
	<select id="getReviews" parameterType="HashMap" resultMap="boardList">
		select T.board_num,T.nickname,T.category,T.detail_category,T.subject,T.content
		      ,T.write_date,T.views,T.profile_image,T.comment_cnt,T.like_cnt,T.hashtag_num
		      ,T.hashtag,T.writer_point
		from
		(
		select rownum rno, V.*
		from
			(
			select C.board_num
		          ,C.nickname
		          ,C.category
		          ,C.detail_category
		          ,C.subject
		          ,C.content
		          ,C.write_date
		          ,C.views
		          ,C.profile_image
		          ,C.comment_cnt
		          ,C.like_cnt
		          ,C.hashtag_num
		          ,C.hashtag
		          ,C.fk_board_num
		          ,D.point writer_point
		    from
				(
				select A.board_num,A.nickname,A.category,A.detail_category,A.subject,A.content,A.write_date,A.views,A.profile_image,A.comment_cnt,A.Like_cnt
				  ,B.hashtag_num,B.fk_board_num,B.hashtag
				from
				(select * from tbl_board where detail_category = '수강/취업후기') A
				left join tbl_hashtag B
				on A.board_num = B.fk_board_num
				) C
			left join
			(select point,nickname from tbl_member) D
			on C.nickname = D.nickname
			) V
		) T
		where rno between #{startRno} and #{endRno}
	</select>
	
	
	
	
	<!-- 공지사항 총 갯수 얻기 -->
	<select id="getTotalNoticesCount" parameterType="HashMap" resultType="Integer">
		select count(*)
		from tbl_board
		where category='공지사항'
	</select>
	
	
	<!-- 공지사항 리스트 얻기 -->
	<select id="getNotices" parameterType="HashMap" resultMap="boardList">
		select T.board_num,T.nickname,T.category,T.detail_category,T.subject,T.content
		      ,T.write_date,T.views,T.profile_image,T.comment_cnt,T.like_cnt,T.hashtag_num
		      ,T.hashtag,T.writer_point
		from
		(
		select rownum rno, V.*
		from
			(
			select C.board_num
		          ,C.nickname
		          ,C.category
		          ,C.detail_category
		          ,C.subject
		          ,C.content
		          ,C.write_date
		          ,C.views
		          ,C.profile_image
		          ,C.comment_cnt
		          ,C.like_cnt
		          ,C.hashtag_num
		          ,C.hashtag
		          ,C.fk_board_num
		          ,D.point writer_point
		    from
				(
				select A.board_num,A.nickname,A.category,A.detail_category,A.subject,A.content,A.write_date,A.views,A.profile_image,A.comment_cnt,A.Like_cnt
				  ,B.hashtag_num,B.fk_board_num,B.hashtag
				from
				(select * from tbl_board where category = '공지사항') A
				left join tbl_hashtag B
				on A.board_num = B.fk_board_num
				) C
			left join
			(select point,nickname from tbl_member) D
			on C.nickname = D.nickname
			) V
		) T
		where rno between #{startRno} and #{endRno}
	</select>
	
	
	
	<!-- 글번호를 가지고 게시글하나에대한 정보 가져오기 -->
	<select id="getBoard" parameterType="Integer" resultType="com.gukmo.board.model.BoardVO">
		select * from tbl_board
		where board_num = ${boardNum}
	</select>
	
	
	<!--=============== Board 끝 ============-->
	
	
	
</mapper>