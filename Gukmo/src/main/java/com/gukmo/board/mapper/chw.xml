<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="chw">
	<!--================================================================================================================================-->
	<!--============================================================ Member 시작 =========================================================-->
	<!--================================================================================================================================-->
	
	
	<!-- 아이디 중복검사 -->
	<select id="idExistCheck" parameterType="String" resultType="Integer">
		select count(userid) from tbl_member_login
		where userid = #{userid}
	</select>
	
	<!-- 닉네임중복검사 -->
	<select id="nicknameExistCheck" parameterType="String" resultType="Integer">
		select count(nickname) from tbl_member
		where nickname = #{nickname}
	</select>
	
	
	<!-- 이메일중복검사 -->
	<select id="emailExistCheck" parameterType="String" resultType="Integer">
		select count(email) from tbl_member
		where email = #{email}
	</select>
	
	<!-- 이메일중복검사 -->
	<select id="academyNameExistCheck" parameterType="String" resultType="Integer">
		select count(academy_name) from tbl_academy_member
		where academy_name = #{academyName}
	</select>
	
	
	<!-- 멤버로그인테이블에 회원가입정보 insert -->
	<insert id="insert_member_login" parameterType="HashMap">
		insert into tbl_member_login(userid, passwd, status)
		<if test='academy_name != ""'>
		  values(#{userid}, #{passwd},default)
		</if>
		<if test='academy_name == ""'>
		  values(#{userid}, #{passwd}, '대기')
		</if>
	</insert>
	
	<!-- 멤버테이블에 회원가입정보 insert -->
	<insert id="insert_member" parameterType="HashMap">
		insert into tbl_member(fk_userid, email, email_acept, username, nickname)
		values(#{userid}, #{email}, #{email_acept}, #{username}, #{nickname})
	</insert>
	
	
	
	
	<!-- 멤버테이블에 이메일변경시 update -->
	<update id="editEmail" parameterType="HashMap">
		update tbl_member set email = #{email} 
		where userid = #{userid}
	</update>
	
	
	
	
	<!-- 교육기관멤버테이블에 회원가입정보 insert -->
	<insert id="insert_academy_member" parameterType="HashMap">
		insert into tbl_academy_member(fk_userid, academy_name, company_num, tel, homepage)
		values(#{userid}, #{academy_name}, #{company_num}, #{tel}, #{homepage})
	</insert>
	
	
	
	
	
	
	<!-- 멤버로그인테이블에서 회원정보 다 삭제 -->
	<delete id="delete_member" parameterType="String">
		delete from tbl_member_login where userid = #{userid}
	</delete>
	
	<!-- 회원의 활동내역리스트 얻어오기 -->
	<select id="getActivities" parameterType="HashMap" resultType="com.gukmo.board.model.ActivityVO">
		select T.activity_num,T.fk_userid,T.fk_board_num,T.activity_date,T.subject,
			   T.detail_category,T.division,T.nickname
		from
		(
			select V.*,rownum rno
			from
			(
				select activity_num,
					   fk_userid,
					   fk_board_num,
					   to_char(activity_date,'yyyy-mm-dd hh:mm:ss') activity_date,
					   subject,
					   detail_category,
					   division,
					   nickname
			    from tbl_activity
			    where fk_userid = #{userid}
			    order by activity_date desc
			) V
		) T
	    where rno between #{startRno} and #{endRno}
	</select>
	
	<!-- 회원의 활동내역 총 갯수 얻기 -->
	<select id="getTotalActivities" parameterType="HashMap" resultType="Integer">
		select count(*)
	    from tbl_activity
	    where fk_userid = #{userid} 
	</select>
	
	
	<!-- 다른사람의 유저의 활동내역 리스트 얻기 -->
	<select id="getActivityOther" parameterType="HashMap" resultType="com.gukmo.board.model.ActivityVO">
		select T.activity_num,T.fk_userid,T.fk_board_num,T.activity_date,T.subject,
			   T.detail_category,T.division,T.nickname
		from
		(
			select V.*,rownum rno
			from
			(
				select activity_num,
					   fk_userid,
					   fk_board_num,
					   to_char(activity_date,'yyyy-mm-dd hh:mm:ss') activity_date,
					   subject,
					   detail_category,
					   division,
					   nickname
			    from tbl_activity
			    where nickname = #{nickname}
			) V
		) T
	    where rno between #{startRno} and #{endRno}
	    order by activity_date desc
	</select>
	
	<!-- 유저의 활동내역 총 갯수를 알아오기(닉네임으로) -->
	<select id="getTotalActivityOther" parameterType="HashMap" resultType="Integer">
		select count(*)
	    from tbl_activity
	    where nickname = #{nickname} 
	</select>
	
	
	<!-- 닉네임으로 프로필이미지 얻기 -->
	<select id="getProfileByNickname" parameterType="HashMap" resultType="HashMap">
		select profile_image,point,nickname
	    from tbl_member
	    where nickname = #{nickname} 
	</select>
	
	
	
	
	<!-- 이메일 값으로 userid 알아내기 -->
	<select id="getMyID" parameterType="String" resultType="String">
		select fk_userid from tbl_member
		where email = #{email}
	</select>
	
	
	
	<!-- 비밀번호를 변경할 때 기존비밀번호와 같은지 체크하기 -->
	<select id="samePasswdCheck" parameterType="HashMap" resultType="Integer">
		select count(*) from tbl_member_login
		where userid = #{userid} and passwd = #{passwd}
	</select>
	
	
	
	<!-- 계정찾기 비밀번호 변경 해주기 -->
	<update id="editPasswd" parameterType="HashMap">
		update tbl_member_login set passwd = #{passwd}, update_passwd_date = sysdate
		where userid = #{userid}
	</update>
	
	
	<!-- 마이페이지에서 비밀번호 변경 시 업데이트 해주기 -->
	<update id="editPasswdWithUserid" parameterType="HashMap">
		update tbl_member_login set passwd = #{passwd}, update_passwd_date = sysdate
		where userid = #{userid}
	</update>
	
	
	<!-- 프사첨부를 안했을경우 회원정보 수정 -->
	<update id="editMyInfoWithOutFile" parameterType="com.gukmo.board.model.MemberVO">
		update tbl_member set email_acept=${email_acept},nickname=#{nickname},username=#{username}
		where fk_userid = #{userid}
	</update>
	
	
	<!-- 프사첨부를 했을경우 회원정보 수정 -->
	<update id="editMyInfo" parameterType="HashMap">
		update tbl_member set email_acept=#{email_acept,jdbcType=INTEGER},nickname=#{nickname},username=#{username},profile_image=#{newFileName}
		where fk_userid = #{userid}
	</update>
	
	<!-- 게시판에서도 프사 변경해주기 -->
	<update id="changeBoardByProfileImg" parameterType="HashMap">
		update tbl_board set profile_image=#{newFileName}
		where nickname = #{nickname}
	</update>
	
	
	
	<!-- 교육기관회원 insert -->
	<insert id="insertAcaMember" parameterType="HashMap">
		insert into tbl_academy_member(fk_userid,academy_name,company_num,tel,homepage)
		values(#{userid},#{academy_name},#{company_num},#{tel},#{homepage})
	</insert>
	
	<!-- 상태 업데이트하기 -->
	<update id="updateStatus" parameterType="HashMap">
		update tbl_member_login
		set status = '대기'
		where userid = #{userid}
	</update>
	
	
	<!-- 소셜연동회원인지 체크하기-->
	<select id="snsConnectionCheck" parameterType="String" resultType="Integer">
		select count(*) 
		from tbl_member 
		where (kakao = 1 or naver = 1 or facebook = 1 or google = 1) and email = #{email}
	</select>
	
	
	
	
	
	<!--================================================================================================================================-->
	<!--============================================================ Member 끝 =========================================================-->
	<!--================================================================================================================================-->
	
	
	
	
	
	
	<!--================================================================================================================================-->
	<!--============================================================ Login 시작 =========================================================-->
	<!--================================================================================================================================-->
	<!-- 로그인 성공여부 검사 -->
	<select id="userExistCheck" parameterType="HashMap" resultType="Integer">
		select count(userid) from tbl_member_login
		where userid = #{userid} and passwd = #{passwd}
	</select>
	
	
	
	<!-- 회원의 상태 얻기 -->
	<select id="statusCheck" parameterType="String" resultType="String">
		select status from tbl_member_login
		where userid = #{userid}
	</select>
	
	
	<!-- 회원의 마지막로그인날짜 얻기 -->
	<select id="getLastLoginday" parameterType="String" resultType="Integer">
		select T.*
		from
		(
		select rownum R ,V.*
		from
			(
			select trunc(sysdate-login_date) LastLoginday
			from tbl_login_record
			where fk_userid = #{userid}
			order by LastLoginday desc
			) V
		) T
		where R = 1
	</select>
	
	<!-- 회원의 상태 휴면으로 수정하기 -->
	<update id="editUserStatus_rest" parameterType="String">
		update tbl_member_login set status='휴면' where userid = #{userid}
	</update>
	
	
	<!-- 회원의 마지막비밀번호 변경날짜 얻기 -->
	<select id="getLastUpdateDay" parameterType="String" resultType="Integer">
		select trunc(sysdate-update_passwd_date)
		from tbl_member_login
		where userid = #{userid}
	</select>
	
	<!-- 회원객체 하나 얻기 -->
	<select id="getUser" parameterType="String" resultType="com.gukmo.board.model.MemberVO">
		select V.userid,
		       V.email,
		       V.email_acept,
		       V.nickname,
		       V.point,
		       V.join_date,
		       V.profile_image,
		       V.username,
		       V.kakao,
		       V.naver,
		       V.google,
		       V.facebook,
		       V.authority,
		       V.status,
		       C.academy_name,
		       C.company_num,
		       C.homepage,
		       C.tel
		from
			(
				select A.userid,email,email_acept,nickname,point,join_date,profile_image,username,kakao,google,naver,facebook,authority,status
				from
				(
					select userid,status from tbl_member_login 
					where userid = #{userid} 
				)A
				left join
					tbl_member B
				on A.userid = B.fk_userid
			) V
			left join
			tbl_academy_member C
		on V.userid = C.fk_userid
	</select>
	
	<!-- 로그인테이블에 로그인기록하기 -->
	<insert id="loginRecordSave" parameterType="HashMap">
		insert into tbl_login_record(login_num, fk_userid, login_ip)
		values(seq_login_record.nextval, #{userid}, #{client_ip})
	</insert>
	
	<!-- 관리자로그인테이블에 로그인기록하기 -->
	<insert id="adminloginRecordSave" parameterType="HashMap">
		insert into tbl_admin_login_record(admin_login_num, fk_admin_id, login_ip)
		values(seq_admin_login_record.nextval, #{userid}, #{client_ip})
	</insert>
	
	
	
	
	<!--================================================================================================================================-->
	<!--============================================================ Login 끝 =========================================================-->
 	<!--================================================================================================================================-->












	<!--================================================================================================================================-->
	<!--============================================================ APILogin 시작 =======================================================-->
	<!--================================================================================================================================-->
	
	<!-- 카카오로 로그인 체크하기 -->
	<select id="kakaoConnectionCheck" parameterType="HashMap" resultType="HashMap">
		select naver,google,kakao,email,facebook,nickname from tbl_member
		where email = #{email} 
	</select>
	
	<!-- 카카오연동유저로 바꾸기(update)  -->
	<update id="setKakaoConnection" parameterType="HashMap">
		update tbl_member set kakao = '1'
		where email = #{email}
	</update>
	
	<!-- 네이버연동유저로 바꾸기(update)  -->
	<update id="setNaverConnection" parameterType="HashMap">
		update tbl_member set naver = '1'
		where email = #{email}
	</update>
	
	<!-- 구글연동유저로 바꾸기(update)  -->
	<update id="setGoogleConnection" parameterType="HashMap">
		update tbl_member set google = '1'
		where email = #{email}
	</update>
	
	<!-- 페이스북연동유저로 바꾸기(update)  -->
	<update id="setFacebookConnection" parameterType="HashMap">
		update tbl_member set facebook = '1'
		where email = #{email}
	</update>
	
	
	<!-- 멤버로그인테이블에 회원가입정보 insert -->
	<insert id="social_insert_member_login" parameterType="HashMap">
		insert into tbl_member_login(userid, passwd)
		values(#{userid}, #{passwd})
	</insert>
	
	<!-- 멤버테이블에 회원가입정보 insert -->
	<insert id="social_insert_member" parameterType="HashMap">
		insert into tbl_member(fk_userid, email, email_acept, profile_image,username, nickname, kakao, naver, google,facebook)
		values(#{userid}, #{email}, #{email_acept}, #{profile_image}, #{nickname}, #{nickname},#{kakao},#{naver},#{google},#{facebook})
	</insert>
	
	
	<!-- 이메일 값으로 유저아이디 알아내기 -->
	<select id="getUserid" parameterType="String" resultType="String">
		select fk_userid from tbl_member
		where email = #{email} 
	</select>
	
	
	
	
	<!--================================================================================================================================-->
	<!--============================================================ APILogin 끝 =======================================================-->
	<!--================================================================================================================================-->

















	<!--================================================================================================================================-->
	<!--============================================================ Board 시작 =========================================================-->
	<!--================================================================================================================================-->
	
	<!-- BoardList를 보여주기 위한 BoardVO 매핑 -->
	<resultMap id="boardList" type="com.gukmo.board.model.BoardVO">
		<id property="board_num" column="board_num"/><!-- property는 VO필드이름, column은 오라클 컬럼명 -->
		<result property="nickname" column="nickname" />
		<result property="category" column="category" />
		<result property="detail_category" column="detail_category" />
		<result property="subject" column="subject" />
		<result property="write_date" column="write_date" />
		<result property="views" column="views" />
		<result property="profile_image" column="profile_image" />
		<result property="comment_cnt" column="comment_cnt" />
		<result property="like_cnt" column="like_cnt" />
		<result property="writer_point" column="writer_point" />
		<collection property="hashtags" column="hashtag_num" javaType="java.util.ArrayList" ofType="com.gukmo.board.model.HashtagVO">
			<id property="hashtag_num" column="hashtag_num"/>
			<result property="hashtag" column="hashtag"/>
		</collection>
	</resultMap>
	
	
	
	<!-- 학원List,교육과정List를 보여주기 위한 BoardVO 매핑 -->
	<resultMap id="board" type="com.gukmo.board.model.BoardVO">
		<id property="board_num" column="board_num"/><!-- property는 VO필드이름, column은 오라클 컬럼명 -->
		<result property="nickname" column="nickname" />
		<result property="category" column="category" />
		<result property="detail_category" column="detail_category" />
		<result property="subject" column="subject" />
		<result property="write_date" column="write_date" />
		<result property="views" column="views" />
		<result property="profile_image" column="profile_image" />
		<result property="comment_cnt" column="comment_cnt" />
		<result property="like_cnt" column="like_cnt" />
		<result property="writer_point" column="writer_point" />
		<association property="academy"  column="fk_board_num" javaType="com.gukmo.board.model.AcademyVO" resultMap="academy"/>
		<association property="curriculum"  column="fk_board_num" javaType="com.gukmo.board.model.CurriculumVO" resultMap="curriculum"/>
		<collection property="hashtags" column="hashtag_num" javaType="java.util.ArrayList" ofType="com.gukmo.board.model.HashtagVO">
			<id property="hashtag_num" column="hashtag_num"/>
			<result property="hashtag" column="hashtag"/>
		</collection>
	</resultMap>
	
	<!-- association 으로 선언된 AcademyVO 매핑 -->
	<resultMap id="academy" type="com.gukmo.board.model.AcademyVO">
		<id property="fk_board_num" column="fk_board_num"/><!-- property는 VO필드이름, column은 오라클 컬럼명 -->
		<result property="representative_name" column="representative_name" />
		<result property="address" column="address" />
		<result property="phone" column="phone" />
		<result property="jurisdiction" column="jurisdiction" />
		<result property="homepage" column="homepage" />
		<result property="academy_image" column="academy_image" />
	</resultMap>
	
	<!-- association 으로 선언된 CurriculumVO 매핑 -->
	<resultMap id="curriculum" type="com.gukmo.board.model.CurriculumVO">
		<id property="fk_board_num" column="fk_board_num"/><!-- property는 VO필드이름, column은 오라클 컬럼명 -->
		<result property="core_technology" column="core_technology" />
		<result property="academy_name" column="academy_name" />
		<result property="curriculum_start_date" column="curriculum_start_date" />
		<result property="curriculum_end_date" column="curriculum_end_date" />
		<result property="recruitment_start_date" column="recruitment_start_date" />
		<result property="recruitment_end_date" column="recruitment_end_date" />
		<result property="cnt_recruits" column="cnt_recruits" />
		<result property="join_url" column="join_url" />
	</resultMap>
	
	
	<!-- 교육과정 수정해주기 -->
	<update id="updateCurriculum" parameterType="HashMap">
		update tbl_curriculum 
		set core_technology = #{core_technology},
		    academy_name =#{academy_name},
		    curriculum_start_date = #{curriculum_start_date},
		    curriculum_end_date = #{curriculum_end_date},
		    recruitment_start_date = #{recruitment_start_date},
		    recruitment_end_date = #{recruitment_end_date},
		    cnt_recruits = #{cnt_recruits},
		    join_url = #{join_url}
		where fk_board_num = #{board_num}
	</update>
	
	
	
	<!-- 국비학원 수정해주기 -->
	<update id="updateAcademy" parameterType="HashMap">
		update tbl_academy
		set representative_name = #{representative_name},
			address = #{address},
			phone = #{phone},
			jurisdiction = #{jurisdiction},
			homepage = #{homepage},
			academy_image = #{academy_image}
		where fk_board_num = #{board_num}
	</update>
	
	
	<!-- 필독 공지사항 리스트 얻기 -->
	<select id="getRequiredReadNotice" resultMap="boardList">
		select V.*
		from
			(
			select C.board_num
		          ,C.nickname
		          ,C.category
		          ,C.detail_category
		          ,C.subject
		          ,C.write_date
		          ,C.views
		          ,C.profile_image
		          ,C.comment_cnt
		          ,C.like_cnt
		          ,C.hashtag_num
		          ,C.hashtag
		          ,C.fk_board_num
		          ,D.point writer_point
		    from
				(
				select A.board_num,A.nickname,A.category,A.detail_category,A.subject,A.write_date,A.views,A.profile_image,A.comment_cnt,A.Like_cnt
				  ,B.hashtag_num,B.fk_board_num,B.hashtag
				from
					(
					select *
					from
						(
							select board_num,nickname,category,detail_category,subject,write_date,views,profile_image,comment_cnt,Like_cnt
							from tbl_board where category = '공지사항'
						)AB
					join
						(select * from tbl_notice where must_read = 1) ABC
					on AB.board_num = ABC.fk_board_num
					) A
				left join 
					(select a.hashtag_num, hashtag, fk_board_num from tbl_hashtag a join tbl_hashtag_board_map b on a.hashtag_num = b.hashtag_num) B
				on A.board_num = B.fk_board_num
				) C
			left join
                (select point,nickname from tbl_member) D
			on C.nickname = D.nickname
			) V
			order by write_date desc
	</select>
	
	
	
	
	
	
	
	
	<!-- 공지사항 총 갯수 얻기 -->
	<select id="getTotalNoticesCount" parameterType="HashMap" resultType="Integer">
		<if test='searchWord != ""'>
			select count(*)
			from
			(
				select
				from tbl_board
				where category='공지사항' and detail_category='공지사항'
				and lower(subject) like '%'|| lower(#{searchWord}) ||'%'
			) A
			join
			(
				select *
				from tbl_notice
				and must_read = 0
			) B
			on A.board_num = B.fk_board_num
		</if>
		
		<if test='searchWord == ""'>
			select count(*)
			from
			(
				select * 
				from tbl_board
				where category='공지사항' and detail_category='공지사항'
			) A
			join
			(
				select *
				from tbl_notice
				where must_read = 0
			) B
			on A.board_num = B.fk_board_num
		</if>
	</select>
	
	
	<!-- 공지사항 리스트 얻기 -->
	<select id="getNotices" parameterType="HashMap" resultMap="boardList">
		select V.*
		from
			(
			<if test='sort == ""'>
			select DENSE_RANK() OVER (ORDER BY C.board_num desc) rno
			</if>
			<if test='sort != ""'>
			select DENSE_RANK() OVER (ORDER BY C.${sort} desc,C.board_num desc) rno
			</if>
                  ,C.board_num
		          ,C.nickname
		          ,C.category
		          ,C.detail_category
		          ,C.subject
		          ,C.write_date
		          ,C.views
		          ,C.profile_image
		          ,C.comment_cnt
		          ,C.like_cnt
		          ,C.hashtag_num
		          ,C.hashtag
		          ,C.fk_board_num
		          ,D.point writer_point
		    from
				(
				select A.board_num,A.nickname,A.category,A.detail_category,A.subject,A.write_date,A.views,A.profile_image,A.comment_cnt,A.Like_cnt
				  ,B.hashtag_num,B.fk_board_num,B.hashtag
				from
					(
					select *
					from
						(
							select board_num,nickname,category,detail_category,subject,write_date,views,profile_image,comment_cnt,Like_cnt
							from tbl_board where category = '공지사항'
							<if test='searchWord != ""'>
							  and subject like '%'|| lower(#{searchWord}) ||'%'
							</if>
						) AB
						join
						(
							select *
							from tbl_notice
							where must_read = 0
						) BB
						on
						AB.board_num = BB.fk_board_num
					) A
				left join 
					(select a.hashtag_num, hashtag, fk_board_num from tbl_hashtag a join tbl_hashtag_board_map b on a.hashtag_num = b.hashtag_num) B
				on A.board_num = B.fk_board_num
				) C
			left join
                (select point,nickname from tbl_member) D
			on C.nickname = D.nickname
			) V
        where rno between #{startRno} and #{endRno}
	</select>
	
	
	
	
	
	
	<!-- 국비학원게시물 총 갯수 얻기 -->
	<select id="getTotalAcademyCount" parameterType="HashMap" resultType="Integer">
		select count(*)
		from tbl_board
		where category = #{category} and detail_category = #{detail_category}
	</select>
	
	<!-- 국비학원게시물 리스트 얻기 -->
	<select id="getAcademyList" parameterType="HashMap" resultMap="board">
		select V.*
		from
			(
			<if test='sort == ""'>
			select DENSE_RANK() OVER (ORDER BY C.board_num desc) rno
			</if>
			<if test='sort != ""'>
			select DENSE_RANK() OVER (ORDER BY C.${sort} desc,C.board_num desc) rno
			</if>
                  ,C.board_num
		          ,C.nickname
		          ,C.category
		          ,C.detail_category
		          ,C.subject
		          ,C.write_date
		          ,C.views
		          ,C.profile_image
		          ,C.comment_cnt
		          ,C.like_cnt
		          ,C.hashtag_num
		          ,C.hashtag
		          ,C.fk_board_num
		          ,C.representative_name
		          ,C.address
		          ,C.phone
		          ,C.jurisdiction
		          ,C.homepage
		          ,C.academy_image
		          ,D.point writer_point
		    from
				(
				select A.board_num,A.nickname,A.category,A.detail_category,A.subject,A.write_date,A.views,A.profile_image,A.comment_cnt,A.Like_cnt
					  ,B.hashtag_num,B.hashtag
					  ,E.*
				from
					(
					select board_num,nickname,category,detail_category,subject,write_date,views,profile_image,comment_cnt,Like_cnt
					from tbl_board 
					where category = #{category} and detail_category = #{detail_category}
					<if test='searchWord != ""'>
					  and subject like '%'|| lower(#{searchWord}) ||'%'
					</if>
					) A
				left join 
					(select a.hashtag_num, hashtag, fk_board_num from tbl_hashtag a join tbl_hashtag_board_map b on a.hashtag_num = b.hashtag_num) B
				on A.board_num = B.fk_board_num
				left join 
					(select * from tbl_academy) E
                on A.board_num = E.fk_board_num
				) C
			left join
                (select point,nickname from tbl_member) D
			on C.nickname = D.nickname
			) V
        where rno between #{startRno} and #{endRno}
	</select>
	
	
	<!-- 상세카테고리 알아오기 -->
	<select id="getDetailCategory" parameterType="Integer" resultType="String">
		select detail_category
		from tbl_board
		where board_num = #{board_num}
	</select>
	
	
	<!-- 학원상세 하나 알아오기 -->
	<select id="getAcademyDetail" parameterType="HashMap" resultMap="board">
		select V.*
		from
			(
			select C.board_num
		          ,C.nickname
		          ,C.category
		          ,C.detail_category
		          ,C.subject
		          ,C.write_date
		          ,C.views
		          ,C.profile_image
		          ,C.comment_cnt
		          ,C.like_cnt
		          ,C.hashtag_num
		          ,C.hashtag
		          ,C.fk_board_num
		          ,C.representative_name
		          ,C.address
		          ,C.phone
		          ,C.jurisdiction
		          ,C.homepage
		          ,C.academy_image
		          ,D.point writer_point
		    from
				(
				select A.board_num,A.nickname,A.category,A.detail_category,A.subject,A.write_date,A.views,A.profile_image,A.comment_cnt,A.Like_cnt
					  ,B.hashtag_num,B.hashtag
					  ,E.*
				from
					(
					select board_num,nickname,category,detail_category,subject,write_date,views,profile_image,comment_cnt,Like_cnt
					from tbl_board 
					where category = #{category} and detail_category = #{detail_category}
						  and board_num = #{board_num}
					) A
				left join 
					(select a.hashtag_num, hashtag, fk_board_num from tbl_hashtag a join tbl_hashtag_board_map b on a.hashtag_num = b.hashtag_num) B
				on A.board_num = B.fk_board_num
				left join 
					tbl_academy E
                on A.board_num = E.fk_board_num
				) C
			left join
                (select point,nickname from tbl_member) D
			on C.nickname = D.nickname
			) V
	</select>
	
	
	
	<!-- 교육과정 총 갯수 얻기 -->
	<select id="getTotalCurriculumCount" parameterType="HashMap" resultType="Integer">
		select count(*)
		from tbl_board
		where category='국비학원' and detail_category = #{detail_category}
	</select>
	
	
	
	
	<!-- 교육과정게시물 리스트 얻기 -->
	<select id="getCurriculumList" parameterType="HashMap" resultMap="board">
		select V.*
		from
			(
			<if test='sort == ""'>
			select DENSE_RANK() OVER (ORDER BY C.board_num desc) rno
			</if>
			<if test='sort != ""'>
			select DENSE_RANK() OVER (ORDER BY C.${sort} desc,C.board_num desc) rno
			</if>
                  ,C.board_num
		          ,C.nickname
		          ,C.category
		          ,C.detail_category
		          ,C.subject
		          ,C.write_date
		          ,C.views
		          ,C.profile_image
		          ,C.comment_cnt
		          ,C.like_cnt
		          ,C.hashtag_num
		          ,C.hashtag
		          ,C.fk_board_num
		          ,C.core_technology
		          ,C.academy_name
		          ,to_char(C.curriculum_start_date,'yyyy-mm-dd') curriculum_start_date
		          ,to_char(C.curriculum_end_date,'yyyy-mm-dd') curriculum_end_date
		          ,to_char(C.recruitment_start_date) recruitment_start_date
		          ,to_char(C.recruitment_end_date) recruitment_end_date
		          ,C.cnt_recruits
		          ,C.join_url
		    from
				(
				select A.board_num,A.nickname,A.category,A.detail_category,A.subject,A.write_date,A.views,A.profile_image,A.comment_cnt,A.Like_cnt
					  ,B.hashtag_num,B.hashtag
					  ,E.*
				from
					(
					select board_num,nickname,category,detail_category,subject,write_date,views,profile_image,comment_cnt,Like_cnt
					from tbl_board 
					where category = #{category} and detail_category = #{detail_category}
					<if test='searchWord != ""'>
					  and subject like '%'|| lower(#{searchWord}) ||'%'
					</if>
					) A
				left join 
					(select a.hashtag_num, hashtag, fk_board_num from tbl_hashtag a join tbl_hashtag_board_map b on a.hashtag_num = b.hashtag_num) B
				on A.board_num = B.fk_board_num
				left join 
					(select * from tbl_curriculum) E
                on A.board_num = E.fk_board_num
				) C
			left join
                (select point,nickname from tbl_member) D
			on C.nickname = D.nickname
			) V
        where rno between #{startRno} and #{endRno}
	</select>
	
	
	
	<!-- 글번호 알아오기 -->
	<select id="getBoarSeq" resultType="String">
		select seq_board.nextval from dual
	</select>
	
	<!-- tbl_board에 insert 해주기-->
	<insert id="insertBoardByAcademy" parameterType="HashMap">
		insert into tbl_board(board_num,nickname,category,detail_category,subject,content,write_date,views,profile_image,comment_cnt,like_cnt)
		values(#{board_num},#{nickname},'국비학원','국비학원',#{subject},#{content},sysdate,0,#{profile_image},0,0)
	</insert>
	
	<!-- tbl_academy에 insert해주기 -->
	<insert id="insertAcademy" parameterType="HashMap">
		insert into tbl_academy(fk_board_num,representative_name,address,phone,jurisdiction,homepage,academy_image)
		values(#{board_num},#{representative_name},#{address},#{phone},#{jurisdiction},#{homepage},#{academy_image})
	</insert>
	
	
	
	
	
	<!-- tbl_board에 insert 해주기(교육과정글)-->
	<insert id="insertBoardByCurriculum" parameterType="HashMap">
		insert into tbl_board(board_num,nickname,category,detail_category,subject,content,write_date,views,profile_image,comment_cnt,like_cnt)
		values(#{board_num},#{nickname},'국비학원','교육과정',#{subject},#{content},sysdate,0,#{profile_image},0,0)
	</insert>
	
	<!-- tbl_curriculum에 insert해주기 -->
	<insert id="insertCurriculum" parameterType="HashMap">
		insert into tbl_curriculum(fk_board_num,core_technology,academy_name,curriculum_start_date,curriculum_end_date,recruitment_start_date,recruitment_end_date,cnt_recruits,join_url)
		values(#{board_num},#{core_technology},#{academy_name},#{curriculum_start_date},#{curriculum_end_date},#{recruitment_start_date},#{recruitment_end_date},#{cnt_recruits},#{join_url})
	</insert>
	
	
	
	<!-- 포인트 올려주기 -->
	<update id="pointPlus" parameterType="HashMap">
		update tbl_member set point = point + 10
		where nickname = #{nickname} 
	</update>
	
	
	<!-- 활동내역기록해주기 -->
	<insert id="ActivityRecord" parameterType="HashMap">
		insert into tbl_activity(activity_num,fk_userid,fk_board_num,activity_date,subject,detail_category,division,nickname)
		values(seq_activity.nextval,#{userid},#{board_num},sysdate,#{subject},'국비학원','게시글작성',#{nickname})
	</insert>
	
	
	
	
	<!--================================================================================================================================-->
	<!--====================================================== Board 끝 =================================================================-->
	<!--================================================================================================================================-->
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!--================================================================================================================================-->
	<!--====================================================== Search 시작 =================================================================-->
	<!--================================================================================================================================-->
	
	<!-- 검색어로 검색한 결과물의 갯수 알아오기 -->
	<select id="getResultByKeyword" parameterType="HashMap" resultType="Integer">

		<if test='detail_category != null'>
		select count(subject)
		from (select lower(subject) subject ,detail_category from tbl_board) V
		where subject like '%'|| lower(#{keyword}) ||'%' 
		and detail_category = #{detail_category}
		</if>
		
		<if test='detail_category == null and hashtag != ""'>
	    select count(*)
	    from 
	    (
	    	select dense_rank()OVER (order by board_num desc) rno,
		           board_num, subject, content, category,
		           NH.hashtag as hashtag, HB.write_date as write_date
		    from
		    (
		        select board_num, subject, content, category, B.write_date as write_date
		        from tbl_board B left join tbl_hashtag_board_map HM
		        on board_num = fk_board_num left join tbl_hashtag H
		        on HM.hashtag_num = H.hashtag_num
		        where 1=1
                     <if test= 'keyword != ""'>
                     and hashtag like '%'||lower(#{keyword})||'%'
                     </if>
		    ) HB join tbl_hashtag_board_map NHM
		    on board_num = fk_board_num join tbl_hashtag NH
		    on NHM.hashtag_num = NH.hashtag_num
		    order by rno desc
		)V
		where rownum = 1
	    </if>
	    
	    <if test='detail_category == null and hashtag == ""'>
	    select count(*)
	    from(
    		select dense_rank()OVER (order by board_num desc) rno,
			       board_num, subject, content, category, hashtag, write_date, -- 게시판 글
			       representative_name, address, phone, jurisdiction, homepage, academy_image, -- 학원 글
			       core_technology, academy_name, curriculum_start_date, curriculum_end_date, recruitment_end_date, join_url -- 과정 글
			from
			(
                select B.board_num as board_num, subject, content, category, hashtag, B.write_date as write_date
                from tbl_board B join
                (
                    select board_num
                    from tbl_board B left join tbl_hashtag_board_map HM
                    on board_num = fk_board_num left join tbl_hashtag H
                    on HM.hashtag_num = H.hashtag_num
                    where 1=1
                    <if test= 'keyword != ""'>
						and subject like '%'||lower(#{keyword})||'%'
					    or content like '%'||lower(#{keyword})||'%'
					    or hashtag like '%'||lower(#{keyword})||'%'
					</if>
                    group by board_num
                ) only_BN 
                on B.board_num = only_BN.board_num left join tbl_hashtag_board_map NHM
                on B.board_num = NHM.fk_board_num left join tbl_hashtag NH
                on NHM.hashtag_num = NH.hashtag_num
            ) join_BH
            left join
            (
                select fk_board_num, representative_name, address, phone, jurisdiction, homepage, academy_image
                from tbl_academy
            ) A
            on join_BH.board_num = A.fk_board_num
            left join
            ( 
                select fk_board_num, core_technology, academy_name, curriculum_start_date, curriculum_end_date, recruitment_end_date, join_url
                from tbl_curriculum
            ) C
            on join_BH.board_num = C.fk_board_num
	        order by rno desc
	    )V
	    where rownum = 1
	    </if>
	</select>
	

	
	
	<!-- ip로 가장 최근 로그인한 아이디 값 알아내기 -->
	<select id="getUseridWithIp" parameterType="String" resultType="String">
		select fk_userid
	    from
		    (
		    select rownum rno,fk_userid
		    from
		    (
			    select fk_userid
			    from tbl_login_record
			    where login_ip = '0:0:0:0:0:0:0:1'
			    order by login_date desc
		    ) V
	    ) T
	    where rno = 1
	</select>
	
	<!-- 검색어로 검색한 결과물의 갯수 알아오기 -->
	<insert id="saveKeyWord" parameterType="HashMap">
		<if test='userid == ""'>
			insert into tbl_search(search_num,keyword,search_date,search_ip)
			values(seq_search.nextval,#{keyword},sysdate,#{search_ip})
		</if>
		
		<if test='userid != ""'>
			insert into tbl_search(search_num,keyword,search_date,search_ip,userid)
			values(seq_search.nextval,#{keyword},sysdate,#{search_ip},#{userid})
		</if>
	</insert>
	
	
	
	<!--================================================================================================================================-->
	<!--====================================================== Search 끝=================================================================-->
	<!--================================================================================================================================-->
	
	
	
	
	
	
	
	
	<!--================================================================================================================================-->
	<!--====================================================== Admin 시작 =================================================================-->
	<!--================================================================================================================================-->
	
	<!-- 정지당한 회원 정지사유 얻기 -->
	<select id="getPenalty" parameterType="String" resultType="com.gukmo.board.model.PenaltyVO">
		select penalty_num,
	           nickname,
	           simple_penalty_reason,
	           detail_penalty_reason,
	           to_char(penalty_start_date,'yyyy-mm-dd') penalty_start_date,
	           penalty_period,
	           to_char(penalty_start_date+penalty_period,'yyyy-mm-dd') as penalty_end_date
	    from tbl_penalty
	    where nickname = #{nickname}
	</select>
	
	
	<!-- 회원정보수정하기 -->
	<update id="editMember" parameterType="HashMap">
		update tbl_member set authority = #{authority}
		where fk_userid = #{userid}
	</update>
	
	<!-- 회원로그인에서 상태수정하기 -->
	<update id="editMemberLogin" parameterType="HashMap">
		update tbl_member_login set status = #{status}
		where userid = #{userid}
	</update>
	
	<!-- 정지내역등록하기 -->
	<insert id="penaltyNew" parameterType="HashMap">
		insert into tbl_penalty(penalty_num,nickname,simple_penalty_reason,detail_penalty_reason,penalty_start_date,penalty_period)
		values(seq_penalty.nextval,#{nickname},#{simple_penalty_reason},#{detail_penalty_reason},sysdate,#{penalty_period})
	</insert>
	
	
	<!-- 정지내역삭제하기 -->
	<delete id="penaltyDelete" parameterType="String">
		delete from tbl_penalty where nickname = #{nickname}
	</delete>
	
	<!-- 게시글신고 접수처리하기 -->
	<update id="receiptReportBoard" parameterType="String">
		update tbl_board_report set receipt = 1 where report_num = #{report_num}
	</update>
	
	<!-- 댓글신고 접수처리하기 -->
	<update id="receiptReportComment" parameterType="String">
		update tbl_comment_report set receipt = 1 where report_num = #{report_num}
	</update>
	
	<!-- 피신고자 상태체크하기 -->
	<select id="memberStatusCheck" parameterType="String" resultType="String">
		select status from tbl_member_login where userid = #{userid}
	</select>
	
	<!-- 회원 정지상태로 바꾸기 -->
	<update id="memberStatusChange" parameterType="HashMap">
		update tbl_member_login set status = '정지' where userid = #{userid}
	</update>
	
	
	
	<!-- 교육기관회원 총 갯수 구하기 -->
	<select id="getTotalCnt_academy" parameterType="HashMap" resultType="Integer">
		select count(*) from 
			tbl_academy_member A
		left join 
			tbl_member B
		on A.fk_userid = B.fk_userid
		left join
			tbl_member_login C
		on A.fk_userid = C.userid
		where 1=1
		<if test='searchType != "" and searchWord != ""'>
			and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%' 
		</if>
		<if test='status != ""'>
			and status = #{status} 
		</if>
		<if test='start_date != "" and end_date != ""'>
			and join_date between #{start_date} and #{end_date} 
		</if>
	</select>
	
	
	<!-- 교육기관회원리스트 얻기  -->
	<select id="getAcaMemberList" parameterType="HashMap" resultType="HashMap">
		select *
		from
		(
			select rownum rno,V.*
			from
			(
				select userid,nickname,academy_name,to_char(join_date,'yyyy-mm-dd') join_date,status,homepage
				from 
					tbl_academy_member A
				left join 
					tbl_member B
				on A.fk_userid = B.fk_userid
				left join 
					tbl_member_login C
				on A.fk_userid = C.userid
				where 1=1
				<if test='searchType != "" and searchWord != ""'>
					and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%' 
				</if>
				<if test='status != ""'>
					and status = #{status} 
				</if>
				<if test='start_date != "" and end_date != ""'>
					and join_date between #{start_date} and #{end_date} 
				</if>
					order by ${sort} ${direction}
			) V
		) T
		where rno between #{startRno} and #{endRno}
	</select>
	
	
	
	<!-- 일반회원 총 갯수 구하기 -->
	<select id="getTotalCntNormalMember" parameterType="HashMap" resultType="Integer">
		select count(*) 
		from 
			tbl_member A
		left join
			tbl_member_login B
		on A.fk_userid = B.userid
		where 1=1
		<if test='searchType != "" and searchWord != ""'>
			and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%' 
		</if>
		<if test='status != ""'>
			and status = #{status} 
		</if>
		<if test='start_date != "" and end_date != ""'>
			and join_date between #{start_date} and #{end_date} 
		</if>
	</select>
	
	
	
	<!-- 일반회원리스트 얻기  -->
	<select id="getNormalMemberList" parameterType="HashMap" resultType="HashMap">
		select *
		from
		(
			select rownum rno,V.*
			from
			(
				select nickname,userid,email,to_char(join_date,'yyyy-mm-dd') join_date,status
				from 
					tbl_member A
				left join 
					tbl_member_login B
				on A.fk_userid = B.userid
				where 1=1
				<if test='searchType != "" and searchWord != ""'>
					and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%' 
				</if>
				<if test='status != ""'>
					and status = #{status} 
				</if>
				<if test='start_date != "" and end_date != ""'>
					and join_date between #{start_date} and #{end_date} 
				</if>
					order by ${sort} ${direction}
			) V
		) T
		where rno between #{startRno} and #{endRno}
	</select>
	
	
	
	
	<!-- 광고내역 총 수 구하기 -->
	<select id="getTotalCntAdvertisement" parameterType="HashMap" resultType="Integer">
		select count(*) 
		from 
			tbl_advertisement
		where 1=1
		<if test='searchType != "" and searchWord != ""'>
			and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%' 
		</if>
		<if test='status != ""'>
			and status = #{status} 
		</if>
		<if test='division != ""'>
			and division = #{division} 
		</if>
		<if test='start_date != "" and end_date != ""'>
			and start_date between #{start_date} and #{end_date} 
		</if>
	</select>
	
	
	<!-- 페이징처리한 광고내역 가지고오기  -->
	<select id="getAdvertisementList" parameterType="HashMap" resultType="HashMap">
		select *
		from
		(
			select rownum rno,V.*
			from
			(
				select advertisement_num,
					   division,
					   client_name,
					   client_phone,
					   to_char(start_date,'yyyy-mm-dd') || ' ~ ' || to_char((start_date + period),'yyyy-mm-dd') || ' (' || period || ')일 ' period, 
					   case status when 0 then '진행중' else '종료' end as status 
				from 
					tbl_advertisement
				where 1=1
				<if test='searchType != "" and searchWord != ""'>
					and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%' 
				</if>
				<if test='status != ""'>
					and status = #{status} 
				</if>
				<if test='division != ""'>
					and division = #{division} 
				</if>
				<if test='start_date != "" and end_date != ""'>
					and start_date between #{start_date} and #{end_date} 
				</if>
					order by ${sort} ${direction}
			) V
		) T
		where rno between #{startRno} and #{endRno}
	</select>
	
	
	
	
	
	
	<!-- 신고내역 총 수 구하기 -->
	<select id="getTotalCntReport" parameterType="HashMap" resultType="Integer">
		select count(*)
		from
		(
			select report_num, fk_board_num as fk_num,
				report_nickname,
				reported_nickname, simple_report_reason,
				detail_report_reason,
				report_date, report_type, receipt
			from
				tbl_board_report
			union all
			select report_num, fk_comment_num as fk_num,
				report_nickname,
				reported_nickname, simple_report_reason,
				detail_report_reason,
				report_date, report_type, receipt
			from
				tbl_comment_report
		)
		where 1 = 1
		<if test='searchType != "" and searchWord != ""'>
			and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%' 
		</if>
		<if test='report_type != ""'>
			and report_type = #{report_type} 
		</if>
		<if test='simple_report_reason != ""'>
			and simple_report_reason = #{simple_report_reason} 
		</if>
		<if test='receipt == "접수전"'>
			and receipt = 0
		</if>
		<if test='receipt == "접수완료"'>
			and receipt = 1
		</if>
		<if test='start_date != "" and end_date != ""'>
			and report_date between #{start_date} and #{end_date} 
		</if>
	</select>
	
	
	<!-- 페이징처리한 신고내역 가지고오기  -->
	<select id="getReportList" parameterType="HashMap" resultType="HashMap">
		select *
		from
		(
			select rownum rno,V.*
			from
			(
				select report_num, fk_num, report_nickname,
					   reported_nickname,
					   simple_report_reason,
					   report_date, report_type,
					   receipt
				from
				(
					select report_num, fk_board_num as fk_num,
						   report_nickname,
						   reported_nickname, simple_report_reason,
						   report_date, report_type, 
						   case receipt when 0 then '접수전' else '접수완료' end as receipt
					from tbl_board_report
					union all
					select report_num, fk_comment_num as fk_num,
						   report_nickname,
					  	   reported_nickname, simple_report_reason,
						   report_date, report_type, 
						   case receipt when 0 then '접수전' else '접수완료' end as receipt
					from tbl_comment_report
				) A
				where 1=1
				<if test='searchType != "" and searchWord != ""'>
					and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%' 
				</if>
				<if test='report_type != ""'>
					and report_type = #{report_type} 
				</if>
				<if test='simple_report_reason != ""'>
					and simple_report_reason = #{simple_report_reason} 
				</if>
				<if test='receipt != ""'>
					and receipt = #{receipt} 
				</if>
				<if test='start_date != "" and end_date != ""'>
					and report_date between #{start_date} and #{end_date} 
				</if>
				order by ${sort} ${direction}
			) V
		) T
		where rno between #{startRno} and #{endRno}
	</select>
	
	
	
	<!-- 인기 게시물 3개 가져오기(조회높은것)-->
	<select id="getPopularBoard" resultType="com.gukmo.board.model.BoardVO">
		select *
		from
			(
			select rownum rno,V.*
			from
				(
				select board_num,nickname,detail_category,subject,write_date,views,comment_cnt,like_cnt
			    from tbl_board
			    where to_char(write_date,'yyyy-mm-dd') =  to_char(sysdate, 'yyyy-mm-dd')
			    	  and detail_category != '공지사항'
			    order by views desc
			    ) V
			) T
		where rno between 1 and 3
	</select>
	
	
	
	<!-- 멤버로그인테이블에 회원가입정보 insert -->
	<insert id="insertVisitor" parameterType="com.gukmo.board.model.VisitCountVO">
		insert into tbl_visitor
			(
                visit_num,
                visit_ip,
                visit_time,
                <if test="visit_refer != null and visit_refer !=''">
                visit_refer,
                </if>
                visit_browser
            )
            values
            (
                seq_visitor.nextval,
                #{visit_ip},
                sysdate,
                <if test="visit_refer != null and visit_refer !=''">
                #{visit_refer},
                </if>
                #{visit_browser}
            )
	</insert>
	
   
	<!-- 월별 방문자 수 구하기-->
	<select id="getVisitCountMonthlyData" resultType="Integer">
		select nvl(count,0) count
		from
		(
			select 
			  count(*) as count, 
			  to_char(visit_time, 'yyyy-mm') as monthlydata
			from
			  tbl_visitor 
			where 1=1
			  and visit_time between to_date(to_char(sysdate,'yyyy')||'-01-01') and to_date(to_char(sysdate,'yyyy')||'-12-31')
			group by to_char(visit_time, 'yyyy-mm')
		)a
		right join
		(
			select to_char(add_months(to_date(to_char(sysdate,'yyyy')||'-12-31'),- (level-1)),'yyyy-mm') monthlydata
			from dual
			connect by add_months(to_date(to_char(sysdate,'yyyy')||'-12-31'),- (level-1)) &gt;= add_months(to_date(to_char(sysdate,'yyyy')||'-12-31'),-11)
		) b
		on a.monthlydata = b.monthlydata
		order by b.monthlydata
	</select>
	
	
	
	<!-- 오늘 회원가입수, 오늘 방문자 수, 오늘 작성 게시물 수 구하기 -->
	<select id="getSummary" resultType="HashMap">
		select *
	    from
	    (
		    select count(*) as cnt_visit
		    from tbl_visitor
		    where visit_time between to_date(to_char(sysdate,'yyyy-mm-dd') || ' 00:00:00','yyyy-mm-dd hh24:mi:ss') and to_date(to_char(sysdate,'yyyy-mm-dd') || ' 23:59:59','yyyy-mm-dd hh24:mi:ss')
	    ) A
	    cross join
	    (
		    select count(*) as cnt_join_member
		    from tbl_member
		    where join_date between to_date(to_char(sysdate,'yyyy-mm-dd') || ' 00:00:00','yyyy-mm-dd hh24:mi:ss') and to_date(to_char(sysdate,'yyyy-mm-dd') || ' 23:59:59','yyyy-mm-dd hh24:mi:ss')
	    ) B
	    cross join
	    (
		    select count(*) as cnt_board
		    from tbl_board
		    where write_date between to_date(to_char(sysdate,'yyyy-mm-dd') || ' 00:00:00','yyyy-mm-dd hh24:mi:ss') and to_date(to_char(sysdate,'yyyy-mm-dd') || ' 23:59:59','yyyy-mm-dd hh24:mi:ss')
	    ) C
	    cross join
	    (
		    select max(count(*)) as max_cnt_visit
		    from tbl_visitor
		    group by to_date(visit_time,'yyyy-mm-dd')
	    ) D
	    cross join
	    (
		    select max(count(*)) as max_cnt_join_member
		    from tbl_member
		    group by to_date(join_date,'yyyy-mm-dd')
	    ) E
	    cross join
	    (
		    select max(count(*)) as max_cnt_board
	        from tbl_board
	        group by to_date(write_date,'yyyy-mm-dd')
	    )
	</select>
	
	
	
	<select id="getCommunityActiveData" resultType="java.util.LinkedHashMap">
		select round(cnt_free/cnt_all*100) free_percentage,
	           round(cnt_qna/cnt_all*100) qna_percentage,
	           round(cnt_study/cnt_all*100) study_percentage,
	           round(cnt_hobby/cnt_all*100) hobby_percentage,
	           round(cnt_review/cnt_all*100) review_percentage
	    from
	    (
	        select count(*) as cnt_free
	        from tbl_board 
	        where write_date between to_date(to_char(sysdate,'yyyy-mm-dd') || ' 00:00:00','yyyy-mm-dd hh24:mi:ss') and to_date(to_char(sysdate,'yyyy-mm-dd') || ' 23:59:59','yyyy-mm-dd hh24:mi:ss')
	              and category='커뮤니티' and detail_category = '자유게시판'
	    ) A
	    cross join
	    (
	        select count(*) as cnt_qna
	        from tbl_board 
	        where write_date between to_date(to_char(sysdate,'yyyy-mm-dd') || ' 00:00:00','yyyy-mm-dd hh24:mi:ss') and to_date(to_char(sysdate,'yyyy-mm-dd') || ' 23:59:59','yyyy-mm-dd hh24:mi:ss')
	              and category='커뮤니티' and detail_category = 'QnA'
	    ) B 
	    cross join
	    (
	        select count(*) as cnt_study
	        from tbl_board 
	        where write_date between to_date(to_char(sysdate,'yyyy-mm-dd') || ' 00:00:00','yyyy-mm-dd hh24:mi:ss') and to_date(to_char(sysdate,'yyyy-mm-dd') || ' 23:59:59','yyyy-mm-dd hh24:mi:ss')
	              and category='커뮤니티' and detail_category = '스터디'
	    ) C
	    cross join
	    (
	        select count(*) as cnt_hobby
	        from tbl_board 
	        where write_date between to_date(to_char(sysdate,'yyyy-mm-dd') || ' 00:00:00','yyyy-mm-dd hh24:mi:ss') and to_date(to_char(sysdate,'yyyy-mm-dd') || ' 23:59:59','yyyy-mm-dd hh24:mi:ss')
	              and category='커뮤니티' and detail_category = '취미모임'
	    ) D
	    cross join
	    (
	        select count(*) as cnt_review
	        from tbl_board 
	        where write_date between to_date(to_char(sysdate,'yyyy-mm-dd') || ' 00:00:00','yyyy-mm-dd hh24:mi:ss') and to_date(to_char(sysdate,'yyyy-mm-dd') || ' 23:59:59','yyyy-mm-dd hh24:mi:ss')
	              and category='커뮤니티' and detail_category = '수강/취업후기'
	    ) E
	    cross join
	    (
	        select case count(*) when 0 then 1 else count(*) end as cnt_all
	        from tbl_board 
	        where write_date between to_date(to_char(sysdate,'yyyy-mm-dd') || ' 00:00:00','yyyy-mm-dd hh24:mi:ss') and to_date(to_char(sysdate,'yyyy-mm-dd') || ' 23:59:59','yyyy-mm-dd hh24:mi:ss')
	              and category='커뮤니티'
	    ) F
	
	
	</select>
	
	
	
	<!--tbl_board에 insert -->
	<insert id="writeNoticeByBoard" parameterType="HashMap">
		insert into tbl_board(board_num,nickname,category,detail_category,subject,content,write_date,views,profile_image,comment_cnt,like_cnt)
		values(#{board_num},#{nickname},'공지사항','공지사항',#{subject},#{content},sysdate,default,#{profile_image},default,default)
	</insert>
	
	
	<!--tbl_notice에 insert  -->
	<insert id="insertNotice" parameterType="HashMap">
		insert into tbl_notice(fk_board_num,must_read)
		values(#{board_num},#{must_read})
	</insert>
	
	
	
	<resultMap id="noticeMap" type="com.gukmo.board.model.BoardVO">
		<id property="board_num" column="board_num"/><!-- property는 VO필드이름, column은 오라클 컬럼명 -->
		<result property="nickname" column="nickname" />
		<result property="category" column="category" />
		<result property="detail_category" column="detail_category" />
		<result property="subject" column="subject" />
		<result property="write_date" column="write_date" />
		<result property="views" column="views" />
		<result property="profile_image" column="profile_image" />
		<result property="comment_cnt" column="comment_cnt" />
		<result property="like_cnt" column="like_cnt" />
		<result property="writer_point" column="writer_point" />
		<result property="must_read" column="must_read" />
		<collection property="hashtags" column="hashtag_num" javaType="java.util.ArrayList" ofType="com.gukmo.board.model.HashtagVO">
			<id property="hashtag_num" column="hashtag_num"/>
			<result property="hashtag" column="hashtag"/>
		</collection>
	</resultMap>
	
	<select id="getNoticeOne" parameterType="String" resultMap="noticeMap">
	    select A.board_num,A.nickname,A.detail_category,A.subject,A.content,A.must_read
	      	  ,h.hashtag_num,h.hashtag
	    from 
	    (
	    	select D.*,E.must_read
			from
				(select * from tbl_board where board_num = #{board_num}) D
			join
				(select * from tbl_notice where fk_board_num = #{board_num}) E
			on D.board_num = E.fk_board_num
	    ) A
	    left join 
	    	(select a.hashtag_num, hashtag, fk_board_num 
	    	 from 
	    	 	tbl_hashtag a
	    	 join
	    	 	(
	    	 	select *
	    	 	from tbl_hashtag_board_map
	    	 	where fk_board_num = #{board_num}
	    	 	) b
	    	 on a.hashtag_num = b.hashtag_num) h
	    on a.board_num = h.fk_board_num
	</select>
	
	
	<!-- 멤버테이블에 이메일변경시 update -->
	<update id="updateNotice" parameterType="HashMap">
		update tbl_board set subject = #{subject}
                           , content = #{content}
        where board_num = #{board_num}
	</update>
	
	<!-- 멤버테이블에 이메일변경시 update -->
	<update id="updateMustRead" parameterType="HashMap">
		update tbl_notice set must_read = #{must_read} where fk_board_num = #{board_num} 
	</update>
	
	
	<!-- 검색데이터 갯수 가져오기 -->
	<select id="getTotalSearchCnt" parameterType="String" resultType="Integer">
		select count(*)
		from tbl_search
		where userid = #{userid}
	</select>
	
	<!-- 검색데이터 내역 가져오기 -->
	<select id="getSearchData" parameterType="String" resultType="HashMap">
		select *
		from
		(
			select rownum rno , V.*
			from
				(
					select search_num,keyword,to_char(search_date,'yyyy-mm-dd') search_date
					from tbl_search
					where userid = #{userid}
					order by search_date desc
				) V
		) T
		where rno between #{startRno} and #{endRno}
	</select>
	
	
	
	<!-- 회원이 작성한 게시물 총갯수 얻기 -->
	<select id="getTotalWriteBoard" parameterType="String" resultType="Integer">
		select count(*)
		from tbl_board
		where nickname = #{nickname}
	</select>
	
	<!-- 회원이 작성한 게시물 내역 얻기 -->
	<select id="getWriteBoardData" parameterType="String" resultType="HashMap">
		select *
		from
		(
			select rownum rno , V.*
			from
				(
					select BOARD_NUM,CATEGORY,DETAIL_CATEGORY,SUBJECT,to_char(write_date,'yyyy-mm-dd') write_date
					from tbl_board
					where nickname = #{nickname}
					order by write_date desc
				) V
		) T
		where rno between #{startRno} and #{endRno}
	</select>
	
	
	
	
	<!-- 회원이 작성한 게시물 총갯수 얻기 -->
	<select id="getTotalLoginRecord" parameterType="String" resultType="Integer">
		select count(*)
		from tbl_login_record
		where fk_userid = #{userid}
	</select>
	
	<!-- 회원이 작성한 게시물 내역 얻기 -->
	<select id="getLoginRecordData" parameterType="String" resultType="HashMap">
		select *
		from
		(
			select rownum rno , V.*
			from
				(
					select rownum R,to_char(login_date,'yyyy-mm-dd') login_date,login_ip
					from tbl_login_record
					where fk_userid = #{userid}
					order by login_date desc
				) V
			order by R desc
		) T
		where rno between #{startRno} and #{endRno}
	</select>
	
	
	
	
	<!-- 신고한내역 갯수 얻기 -->
	<select id="getTotalReportData" parameterType="String" resultType="Integer">
		select count(*)
		from 
		(
			select report_num, fk_board_num as fk_num,
				report_nickname,
				reported_nickname, simple_report_reason,
				to_char(report_date,'yyyy-mm-dd') report_date, report_type, receipt
			from
				tbl_board_report
			where report_nickname = #{nickname}
			union all
			select report_num, fk_comment_num as fk_num,
				report_nickname,
				reported_nickname, simple_report_reason,
				to_char(report_date,'yyyy-mm-dd') report_date
				, report_type, receipt
			from
				tbl_comment_report
			where report_nickname = #{nickname}
		) V
	</select>
	
	<!-- 신고한내역 얻기 -->
	<select id="getReportData" parameterType="String" resultType="HashMap">
		select *
		from
		(
			select rownum rno,V.*
			from
			(
				select report_num, fk_board_num as fk_num,
					   report_nickname,
					   reported_nickname, simple_report_reason,
				       to_char(report_date,'yyyy-mm-dd') report_date
				       , report_type, receipt
				from
					tbl_board_report
					where report_nickname = #{nickname}
				union all
				select report_num, fk_comment_num as fk_num,
					report_nickname,
					reported_nickname, simple_report_reason,
					to_char(report_date,'yyyy-mm-dd') report_date
					, report_type, receipt
				from
					tbl_comment_report
				where report_nickname = #{nickname}
			) V
		) T
		where rno between #{startRno} and #{endRno}
	</select>
	
	
	
	<!-- 신고당한내역 갯수 얻기 -->
	<select id="getTotalReportedData" parameterType="String" resultType="Integer">
		select count(*)
		from 
		(
			select report_num, fk_board_num as fk_num,
				   report_nickname,
				   reported_nickname, simple_report_reason,
				   to_char(report_date,'yyyy-mm-dd') report_date
				   , report_type, receipt
			from
				tbl_board_report
			where reported_nickname = #{nickname}
			union all
			select report_num, fk_comment_num as fk_num,
				   report_nickname,
				   reported_nickname, simple_report_reason,
				   to_char(report_date,'yyyy-mm-dd') report_date
				   , report_type, receipt
			from
				tbl_comment_report
			where report_nickname = #{nickname}
		) V
	</select>
	
	<!-- 신고당한내역 얻기 -->
	<select id="getReportedData" parameterType="String" resultType="HashMap">
		select *
		from
		(
			select rownum rno,V.*
			from
			(
				select report_num, fk_board_num as fk_num,
					   report_nickname,
					   reported_nickname, simple_report_reason,
				       to_char(report_date,'yyyy-mm-dd') report_date
				       , report_type, receipt
				from
					tbl_board_report
					where reported_nickname = #{nickname}
				union all
				select report_num, fk_comment_num as fk_num,
					report_nickname,
					reported_nickname, simple_report_reason,
					to_char(report_date,'yyyy-mm-dd') report_date
					, report_type, receipt
				from
					tbl_comment_report
				where reported_nickname = #{nickname}
			) V
		) T
		where rno between #{startRno} and #{endRno}
	</select>
	
	
	<!-- 글번호에 해당하는 광고 삭제하기 -->
	<delete id="deleteAdvertisement" parameterType="String">
		delete from tbl_advertisement where advertisement_num = #{advertisement_num}
	</delete>
	
	
	
	
	
	<!--================================================================================================================================-->
	<!--====================================================== Admin 끝 =================================================================-->
	<!--================================================================================================================================-->
	
	
</mapper>