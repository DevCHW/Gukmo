<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="chw">
	<!--================================================================================================================================-->
	<!--============================================================ Member 시작 =========================================================-->
	<!--================================================================================================================================-->
	
	
	<!-- 아이디 중복검사 -->
	<select id="idExistCheck" parameterType="String" resultType="Integer">
		select count(userid) from tbl_member_login
		where userid = #{userid}
	</select>
	
	<!-- 닉네임중복검사 -->
	<select id="nicknameExistCheck" parameterType="String" resultType="Integer">
		select count(nickname) from tbl_member
		where nickname = #{nickname}
	</select>
	
	
	<!-- 이메일중복검사 -->
	<select id="emailExistCheck" parameterType="String" resultType="Integer">
		select count(email) from tbl_member
		where email = #{email}
	</select>
	
	<!-- 이메일중복검사 -->
	<select id="academyNameExistCheck" parameterType="String" resultType="Integer">
		select count(academy_name) from tbl_academy_member
		where academy_name = #{academyName}
	</select>
	
	
	<!-- 멤버로그인테이블에 회원가입정보 insert -->
	<insert id="insert_member_login" parameterType="HashMap">
		insert into tbl_member_login(userid, passwd)
		values(#{userid}, #{passwd})
	</insert>
	
	<!-- 멤버테이블에 회원가입정보 insert -->
	<insert id="insert_member" parameterType="HashMap">
		insert into tbl_member(fk_userid, email, email_acept, username, nickname)
		values(#{userid}, #{email}, #{email_acept}, #{username}, #{nickname})
	</insert>
	
	
	
	
	<!-- 멤버테이블에 이메일변경시 update -->
	<update id="editEmail" parameterType="HashMap">
		update tbl_member set email = #{email} 
		where userid = #{userid}
	</update>
	
	
	
	
	<!-- 교육기관멤버테이블에 회원가입정보 insert -->
	<insert id="insert_academy_member" parameterType="HashMap">
		insert into tbl_academy_member(fk_userid, academy_name, company_num, tel, homepage)
		values(#{userid}, #{academy_name}, #{company_num}, #{tel}, #{homepage})
	</insert>
	
	
	
	
	
	
	<!-- 멤버로그인테이블에서 회원정보 다 삭제 -->
	<delete id="delete_member" parameterType="String">
		delete from tbl_member_login where userid = #{userid}
	</delete>
	
	<!-- 회원의 활동내역리스트 얻어오기 -->
	<select id="getActivities" parameterType="HashMap" resultType="com.gukmo.board.model.ActivityVO">
		select T.activity_num,T.fk_userid,T.fk_board_num,T.activity_date,T.subject,
			   T.detail_category,T.division,T.nickname
		from
		(
			select V.*,rownum rno
			from
			(
				select activity_num,
					   fk_userid,
					   fk_board_num,
					   to_char(activity_date,'yyyy-mm-dd hh:mm:ss') activity_date,
					   subject,
					   detail_category,
					   division,
					   nickname
			    from tbl_activity
			    where fk_userid = #{userid}
			) V
		) T
	    where rno between #{startRno} and #{endRno}
	</select>
	
	<!-- 회원의 활동내역 총 갯수 얻기 -->
	<select id="getTotalActivities" parameterType="HashMap" resultType="Integer">
		select count(*)
	    from tbl_activity
	    where fk_userid = #{userid} 
	</select>
	
	<!-- 이메일 값으로 userid 알아내기 -->
	<select id="getMyID" parameterType="String" resultType="String">
		select fk_userid from tbl_member
		where email = #{email}
	</select>
	
	
	
	<!-- 비밀번호를 변경할 때 기존비밀번호와 같은지 체크하기 -->
	<select id="samePasswdCheck" parameterType="HashMap" resultType="Integer">
		select count(*) from tbl_member_login
		where userid = #{userid} and passwd = #{passwd}
	</select>
	
	
	
	<!-- 계정찾기 비밀번호 변경 해주기 -->
	<update id="editPasswd" parameterType="HashMap">
		update tbl_member_login set passwd = #{passwd}
		where userid = #{userid}
	</update>
	
	
	<!-- 마이페이지에서 비밀번호 변경 시 업데이트 해주기 -->
	<update id="editPasswdWithUserid" parameterType="HashMap">
		update tbl_member_login set passwd = #{passwd}
		where userid = #{userid}
	</update>
	
	
	<!-- 프사첨부를 안했을경우 회원정보 수정 -->
	<update id="editMyInfoWithOutFile" parameterType="com.gukmo.board.model.MemberVO">
		update tbl_member set email_acept=${email_acept},nickname=#{nickname},username=#{username}
		where fk_userid = #{userid}
	</update>
	
	
	<!-- 프사첨부를 했을경우 회원정보 수정 -->
	<update id="editMyInfo" parameterType="HashMap">
		update tbl_member set email_acept=#{email_acept,jdbcType=INTEGER},nickname=#{nickname},username=#{username},profile_image=#{newFileName}
		where fk_userid = #{userid}
	</update>
	
	<!--================================================================================================================================-->
	<!--============================================================ Member 끝 =========================================================-->
	<!--================================================================================================================================-->
	
	
	
	
	
	
	<!--================================================================================================================================-->
	<!--============================================================ Login 시작 =========================================================-->
	<!--================================================================================================================================-->
	<!-- 로그인 성공여부 검사 -->
	<select id="userExistCheck" parameterType="HashMap" resultType="Integer">
		select count(userid) from tbl_member_login
		where userid = #{userid} and passwd = #{passwd}
	</select>
	
	
	
	<!-- 회원의 상태 얻기 -->
	<select id="statusCheck" parameterType="String" resultType="com.gukmo.board.model.MemberVO">
		select * from tbl_member_login
		where userid = #{userid}
	</select>
	
	
	<!-- 회원의 마지막로그인날짜 얻기 -->
	<select id="getLastLoginday" parameterType="String" resultType="Integer">
		select T.*
		from
		(
		select rownum R ,V.*
		from
			(
			select trunc(sysdate-login_date) LastLoginday
			from tbl_login_record
			where fk_userid = #{userid}
			order by LastLoginday desc
			) V
		) T
		where R = 1
	</select>
	
	<!-- 회원의 상태 휴면으로 수정하기 -->
	<update id="editUserStatus_rest" parameterType="String">
		update tbl_member_login set status='휴면' where userid = #{userid}
	</update>
	
	
	<!-- 회원의 마지막비밀번호 변경날짜 얻기 -->
	<select id="getLastUpdateDay" parameterType="String" resultType="Integer">
		select trunc(sysdate-update_passwd_date)
		from tbl_member_login
		where userid = #{userid}
	</select>
	
	<!-- 회원객체 하나 얻기 -->
	<select id="getUser" parameterType="String" resultType="com.gukmo.board.model.MemberVO">
		select V.userid,
		       V.email,
		       V.email_acept,
		       V.nickname,
		       V.point,
		       V.join_date,
		       V.profile_image,
		       V.username,
		       V.kakao,
		       V.naver,
		       V.google,
		       V.facebook,
		       V.authority,
		       V.status,
		       C.academy_name,
		       C.company_num,
		       C.homepage,
		       C.tel
		from
			(
				select A.userid,email,email_acept,nickname,point,join_date,profile_image,username,kakao,google,naver,facebook,authority,status
				from
				(
					select userid,status from tbl_member_login 
					where userid = #{userid} 
				)A
				left join
					tbl_member B
				on A.userid = B.fk_userid
			) V
			left join
			tbl_academy_member C
		on V.userid = C.fk_userid
	</select>
	
	<!-- 로그인테이블에 로그인기록하기 -->
	<insert id="loginRecordSave" parameterType="HashMap">
		insert into tbl_login_record(login_num, fk_userid, login_ip)
		values(seq_login_record.nextval, #{userid}, #{client_ip})
	</insert>
	
	<!-- 관리자로그인테이블에 로그인기록하기 -->
	<insert id="adminloginRecordSave" parameterType="HashMap">
		insert into tbl_admin_login_record(admin_login_num, fk_admin_id, login_ip)
		values(seq_admin_login_record.nextval, #{userid}, #{client_ip})
	</insert>
	
	
	
	
	<!--================================================================================================================================-->
	<!--============================================================ Login 끝 =========================================================-->
 	<!--================================================================================================================================-->












	<!--================================================================================================================================-->
	<!--============================================================ APILogin 시작 =======================================================-->
	<!--================================================================================================================================-->
	
	<!-- 카카오로 로그인 체크하기 -->
	<select id="kakaoConnectionCheck" parameterType="HashMap" resultType="HashMap">
		select naver,google,kakao,email,facebook,nickname from tbl_member
		where email = #{email} 
	</select>
	
	<!-- 카카오연동유저로 바꾸기(update)  -->
	<update id="setKakaoConnection" parameterType="HashMap">
		update tbl_member set kakao = '1'
		where email = #{email}
	</update>
	
	<!-- 네이버연동유저로 바꾸기(update)  -->
	<update id="setNaverConnection" parameterType="HashMap">
		update tbl_member set naver = '1'
		where email = #{email}
	</update>
	
	<!-- 구글연동유저로 바꾸기(update)  -->
	<update id="setGoogleConnection" parameterType="HashMap">
		update tbl_member set google = '1'
		where email = #{email}
	</update>
	
	<!-- 페이스북연동유저로 바꾸기(update)  -->
	<update id="setFacebookConnection" parameterType="HashMap">
		update tbl_member set facebook = '1'
		where email = #{email}
	</update>
	
	
	<!-- 멤버로그인테이블에 회원가입정보 insert -->
	<insert id="social_insert_member_login" parameterType="HashMap">
		insert into tbl_member_login(userid, passwd)
		values(#{userid}, #{passwd})
	</insert>
	
	<!-- 멤버테이블에 회원가입정보 insert -->
	<insert id="social_insert_member" parameterType="HashMap">
		insert into tbl_member(fk_userid, email, email_acept, profile_image,username, nickname, kakao, naver, google,facebook)
		values(#{userid}, #{email}, #{email_acept}, #{profile_image}, #{nickname}, #{nickname},#{kakao},#{naver},#{google},#{facebook})
	</insert>
	
	
	<!-- 이메일 값으로 유저아이디 알아내기 -->
	<select id="getUserid" parameterType="String" resultType="String">
		select fk_userid from tbl_member
		where email = #{email} 
	</select>
	
	
	
	
	<!--================================================================================================================================-->
	<!--============================================================ APILogin 끝 =======================================================-->
	<!--================================================================================================================================-->

















	<!--================================================================================================================================-->
	<!--============================================================ Board 시작 =========================================================-->
	<!--================================================================================================================================-->
	
	<!-- BoardList를 보여주기 위한 BoardVO 매핑 -->
	<resultMap id="boardList" type="com.gukmo.board.model.BoardVO">
		<id property="board_num" column="board_num"/><!-- property는 VO필드이름, column은 오라클 컬럼명 -->
		<result property="nickname" column="nickname" />
		<result property="category" column="category" />
		<result property="detail_category" column="detail_category" />
		<result property="subject" column="subject" />
		<result property="write_date" column="write_date" />
		<result property="views" column="views" />
		<result property="profile_image" column="profile_image" />
		<result property="comment_cnt" column="comment_cnt" />
		<result property="like_cnt" column="like_cnt" />
		<result property="writer_point" column="writer_point" />
		<collection property="hashtags" column="hashtag_num" javaType="java.util.ArrayList" ofType="com.gukmo.board.model.HashtagVO">
			<id property="hashtag_num" column="hashtag_num"/>
			<result property="hashtag" column="hashtag"/>
		</collection>
	</resultMap>
	
	
	
	<!-- 학원List,교육과정List를 보여주기 위한 BoardVO 매핑 -->
	<resultMap id="board" type="com.gukmo.board.model.BoardVO">
		<id property="board_num" column="board_num"/><!-- property는 VO필드이름, column은 오라클 컬럼명 -->
		<result property="nickname" column="nickname" />
		<result property="category" column="category" />
		<result property="detail_category" column="detail_category" />
		<result property="subject" column="subject" />
		<result property="write_date" column="write_date" />
		<result property="views" column="views" />
		<result property="profile_image" column="profile_image" />
		<result property="comment_cnt" column="comment_cnt" />
		<result property="like_cnt" column="like_cnt" />
		<result property="writer_point" column="writer_point" />
		<association property="academy"  column="fk_board_num" javaType="com.gukmo.board.model.AcademyVO" resultMap="academy"/>
		<association property="curriculum"  column="fk_board_num" javaType="com.gukmo.board.model.CurriculumVO" resultMap="curriculum"/>
		<collection property="hashtags" column="hashtag_num" javaType="java.util.ArrayList" ofType="com.gukmo.board.model.HashtagVO">
			<id property="hashtag_num" column="hashtag_num"/>
			<result property="hashtag" column="hashtag"/>
		</collection>
	</resultMap>
	
	<!-- association 으로 선언된 AcademyVO 매핑 -->
	<resultMap id="academy" type="com.gukmo.board.model.AcademyVO">
		<id property="fk_board_num" column="fk_board_num"/><!-- property는 VO필드이름, column은 오라클 컬럼명 -->
		<result property="representative_name" column="representative_name" />
		<result property="address" column="address" />
		<result property="phone" column="phone" />
		<result property="jurisdiction" column="jurisdiction" />
		<result property="homepage" column="homepage" />
		<result property="academy_image" column="academy_image" />
	</resultMap>
	
	
	<!-- association 으로 선언된 CurriculumVO 매핑 -->
	<resultMap id="curriculum" type="com.gukmo.board.model.CurriculumVO">
		<id property="fk_board_num" column="fk_board_num"/><!-- property는 VO필드이름, column은 오라클 컬럼명 -->
		<result property="core_technology" column="core_technology" />
		<result property="academy_name" column="academy_name" />
		<result property="curriculum_start_date" column="curriculum_start_date" />
		<result property="curriculum_end_date" column="curriculum_end_date" />
		<result property="recuitment_end_date" column="recuitment_end_date" />
		<result property="cnt_recruits" column="cnt_recruits" />
		<result property="join_url" column="join_url" />
	</resultMap>
	
	
	
	
	
	
	
	
	<!-- 공지사항 총 갯수 얻기 -->
	<select id="getTotalNoticesCount" parameterType="HashMap" resultType="Integer">
		
		<if test='searchWord != ""'>
			select count(*)
			from tbl_board
			where category='공지사항' and detail_category='공지사항'
			and lower(subject) like '%'|| lower(#{searchWord}) ||'%'
		</if>
		
		<if test='searchWord == ""'>
			select count(*)
			from tbl_board
			where category='공지사항' and detail_category='공지사항'
		</if>
	</select>
	
	
	<!-- 공지사항 리스트 얻기 -->
	<select id="getNotices" parameterType="HashMap" resultMap="boardList">
		select V.*
		from
			(
			<if test='sort == ""'>
			select DENSE_RANK() OVER (ORDER BY C.board_num desc) rno
			</if>
			<if test='sort != ""'>
			select DENSE_RANK() OVER (ORDER BY C.${sort} desc,C.board_num desc) rno
			</if>
                  ,C.board_num
		          ,C.nickname
		          ,C.category
		          ,C.detail_category
		          ,C.subject
		          ,C.write_date
		          ,C.views
		          ,C.profile_image
		          ,C.comment_cnt
		          ,C.like_cnt
		          ,C.hashtag_num
		          ,C.hashtag
		          ,C.fk_board_num
		          ,D.point writer_point
		    from
				(
				select A.board_num,A.nickname,A.category,A.detail_category,A.subject,A.write_date,A.views,A.profile_image,A.comment_cnt,A.Like_cnt
				  ,B.hashtag_num,B.fk_board_num,B.hashtag
				from
					(
					select board_num,nickname,category,detail_category,subject,write_date,views,profile_image,comment_cnt,Like_cnt
					from tbl_board where category = '공지사항'
					<if test='searchWord != ""'>
					  and subject like '%'|| lower(#{searchWord}) ||'%'
					</if>
					) A
				left join 
					(select a.hashtag_num, hashtag, fk_board_num from tbl_hashtag a join tbl_hashtag_board_map b on a.hashtag_num = b.hashtag_num) B
				on A.board_num = B.fk_board_num
				) C
			left join
                (select point,nickname from tbl_member) D
			on C.nickname = D.nickname
			) V
        where rno between #{startRno} and #{endRno}
	</select>
	
	
	
	
	
	
	<!-- 국비학원게시물 총 갯수 얻기 -->
	<select id="getTotalAcademyCount" parameterType="HashMap" resultType="Integer">
		select count(*)
		from tbl_board
		where category = #{category} and detail_category = #{detail_category}
	</select>
	
	<!-- 국비학원게시물 리스트 얻기 -->
	<select id="getAcademyList" parameterType="HashMap" resultMap="board">
		select V.*
		from
			(
			<if test='sort == ""'>
			select DENSE_RANK() OVER (ORDER BY C.board_num desc) rno
			</if>
			<if test='sort != ""'>
			select DENSE_RANK() OVER (ORDER BY C.${sort} desc,C.board_num desc) rno
			</if>
                  ,C.board_num
		          ,C.nickname
		          ,C.category
		          ,C.detail_category
		          ,C.subject
		          ,C.write_date
		          ,C.views
		          ,C.profile_image
		          ,C.comment_cnt
		          ,C.like_cnt
		          ,C.hashtag_num
		          ,C.hashtag
		          ,C.fk_board_num
		          ,C.representative_name
		          ,C.address
		          ,C.phone
		          ,C.jurisdiction
		          ,C.homepage
		          ,C.academy_image
		          ,D.point writer_point
		    from
				(
				select A.board_num,A.nickname,A.category,A.detail_category,A.subject,A.write_date,A.views,A.profile_image,A.comment_cnt,A.Like_cnt
					  ,B.hashtag_num,B.hashtag
					  ,E.*
				from
					(
					select board_num,nickname,category,detail_category,subject,write_date,views,profile_image,comment_cnt,Like_cnt
					from tbl_board 
					where category = #{category} and detail_category = #{detail_category}
					<if test='searchWord != ""'>
					  and subject like '%'|| lower(#{searchWord}) ||'%'
					</if>
					) A
				left join 
					(select a.hashtag_num, hashtag, fk_board_num from tbl_hashtag a join tbl_hashtag_board_map b on a.hashtag_num = b.hashtag_num) B
				on A.board_num = B.fk_board_num
				left join 
					(select * from tbl_academy) E
                on A.board_num = E.fk_board_num
				) C
			left join
                (select point,nickname from tbl_member) D
			on C.nickname = D.nickname
			) V
        where rno between #{startRno} and #{endRno}
	</select>
	
	
	<!-- 상세카테고리 알아오기 -->
	<select id="getDetailCategory" parameterType="Integer" resultType="String">
		select detail_category
		from tbl_board
		where board_num = #{board_num}
	</select>
	
	
	<!-- 학원상세 하나 알아오기 -->
	<select id="getAcademyDetail" parameterType="HashMap" resultMap="board">
		select V.*
		from
			(
			select C.board_num
		          ,C.nickname
		          ,C.category
		          ,C.detail_category
		          ,C.subject
		          ,C.write_date
		          ,C.views
		          ,C.profile_image
		          ,C.comment_cnt
		          ,C.like_cnt
		          ,C.hashtag_num
		          ,C.hashtag
		          ,C.fk_board_num
		          ,C.representative_name
		          ,C.address
		          ,C.phone
		          ,C.jurisdiction
		          ,C.homepage
		          ,C.academy_image
		          ,D.point writer_point
		    from
				(
				select A.board_num,A.nickname,A.category,A.detail_category,A.subject,A.write_date,A.views,A.profile_image,A.comment_cnt,A.Like_cnt
					  ,B.hashtag_num,B.hashtag
					  ,E.*
				from
					(
					select board_num,nickname,category,detail_category,subject,write_date,views,profile_image,comment_cnt,Like_cnt
					from tbl_board 
					where category = #{category} and detail_category = #{detail_category}
						  and board_num = #{board_num}
					) A
				left join 
					(select a.hashtag_num, hashtag, fk_board_num from tbl_hashtag a join tbl_hashtag_board_map b on a.hashtag_num = b.hashtag_num) B
				on A.board_num = B.fk_board_num
				left join 
					(select * from tbl_academy) E
                on A.board_num = E.fk_board_num
				) C
			left join
                (select point,nickname from tbl_member) D
			on C.nickname = D.nickname
			) V
	</select>
	
	
	
	<!-- 교육과정 총 갯수 얻기 -->
	<select id="getTotalCurriculumCount" parameterType="HashMap" resultType="Integer">
		select count(*)
		from tbl_board
		where category='국비학원' and detail_category = #{detail_category}
	</select>
	
	
	
	
	<!-- 교육과정게시물 리스트 얻기 -->
	<select id="getCurriculumList" parameterType="HashMap" resultMap="board">
		select V.*
		from
			(
			<if test='sort == ""'>
			select DENSE_RANK() OVER (ORDER BY C.board_num desc) rno
			</if>
			<if test='sort != ""'>
			select DENSE_RANK() OVER (ORDER BY C.${sort} desc,C.board_num desc) rno
			</if>
                  ,C.board_num
		          ,C.nickname
		          ,C.category
		          ,C.detail_category
		          ,C.subject
		          ,C.write_date
		          ,C.views
		          ,C.profile_image
		          ,C.comment_cnt
		          ,C.like_cnt
		          ,C.hashtag_num
		          ,C.hashtag
		          ,C.fk_board_num
		          ,C.core_technology
		          ,C.academy_name
		          ,to_char(C.curriculum_start_date,'yyyy-mm-dd') curriculum_start_date
		          ,to_char(C.curriculum_end_date,'yyyy-mm-dd') curriculum_end_date
		          ,C.recuitment_end_date
		          ,C.cnt_recruits
		          ,C.join_url
		    from
				(
				select A.board_num,A.nickname,A.category,A.detail_category,A.subject,A.write_date,A.views,A.profile_image,A.comment_cnt,A.Like_cnt
					  ,B.hashtag_num,B.hashtag
					  ,E.*
				from
					(
					select board_num,nickname,category,detail_category,subject,write_date,views,profile_image,comment_cnt,Like_cnt
					from tbl_board 
					where category = #{category} and detail_category = #{detail_category}
					<if test='searchWord != ""'>
					  and subject like '%'|| lower(#{searchWord}) ||'%'
					</if>
					) A
				left join 
					(select a.hashtag_num, hashtag, fk_board_num from tbl_hashtag a join tbl_hashtag_board_map b on a.hashtag_num = b.hashtag_num) B
				on A.board_num = B.fk_board_num
				left join 
					(select * from tbl_curriculum) E
                on A.board_num = E.fk_board_num
				) C
			left join
                (select point,nickname from tbl_member) D
			on C.nickname = D.nickname
			) V
        where rno between #{startRno} and #{endRno}
	</select>
	
	
	
	
	
	<!--================================================================================================================================-->
	<!--====================================================== Board 끝 =================================================================-->
	<!--================================================================================================================================-->
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!--================================================================================================================================-->
	<!--====================================================== Search 시작 =================================================================-->
	<!--================================================================================================================================-->
	
	<!-- 검색어로 검색한 결과물의 갯수 알아오기 -->
	<select id="getResultByKeyword" parameterType="HashMap" resultType="Integer">

		<if test='detail_category != null'>
		select count(subject)
		from (select lower(subject) subject ,detail_category from tbl_board) V
		where subject like '%'|| lower(#{keyword}) ||'%' 
		and detail_category = #{detail_category}
		</if>
		
		<if test='detail_category == null'>
		select rno
	    from(
	        select dense_rank()OVER (order by board_num desc) rno,
            		board_num, category, subject, content, hashtag, write_date, -- 게시판 글
            		representative_name, address, phone, jurisdiction, homepage, academy_image, -- 학원 글
            		core_technology, academy_name, to_char(curriculum_start_date,'yyyy-mm-dd') as curriculum_start_date,
            		to_char(curriculum_end_date,'yyyy-mm-dd') as curriculum_end_date,
            		to_char(recuitment_end_date,'yyyy-mm-dd') as recuitment_end_date, join_url -- 과정 글
		    from
		    (
		        select board_num, subject, content, category,  hashtag, write_date
		        from tbl_board B
		        left join
		        (
		            select fk_board_num, hashtag
		            from
		            ( select hashtag_num, fk_board_num, write_date from tbl_hashtag_board_map ) HM
		            join
		            ( select hashtag_num, hashtag from tbl_hashtag ) H
		            on HM.hashtag_num = H.hashtag_num
		        ) join_H
		        on B.board_num = join_H.fk_board_num
		    ) join_BH
		    left join
		    (
		        select fk_board_num, representative_name, address, phone, jurisdiction, homepage, academy_image
		        from tbl_academy
		    ) A
		    on join_BH.board_num = A.fk_board_num
		    left join
		    ( 
		        select fk_board_num, core_technology, academy_name, curriculum_start_date, curriculum_end_date, recuitment_end_date, join_url
		        from tbl_curriculum
		    ) C
		    on join_BH.board_num = C.fk_board_num	        
			where 1 = 1
			<if test= 'keyword != ""'>
			and subject like '%'||lower(#{keyword})||'%'
		    or content like '%'||lower(#{keyword})||'%'
		    or hashtag like '%'||lower(#{keyword})||'%'
		    </if>
	        order by rno desc
	    )V
	    where rownum = 1	
		</if>
	</select>
	

	
	
	<!-- ip로 가장 최근 로그인한 아이디 값 알아내기 -->
	<select id="getUseridWithIp" parameterType="String" resultType="String">
		select fk_userid
	    from
		    (
		    select rownum rno,fk_userid
		    from
		    (
			    select fk_userid
			    from tbl_login_record
			    where login_ip = '0:0:0:0:0:0:0:1'
			    order by login_date desc
		    ) V
	    ) T
	    where rno = 1
	</select>
	
	<!-- 검색어로 검색한 결과물의 갯수 알아오기 -->
	<insert id="saveKeyWord" parameterType="HashMap">
		<if test='userid == ""'>
			insert into tbl_search(search_num,keyword,search_date,search_ip)
			values(seq_search.nextval,#{keyword},sysdate,#{search_ip})
		</if>
		
		<if test='userid != ""'>
			insert into tbl_search(search_num,keyword,search_date,search_ip,userid)
			values(seq_search.nextval,#{keyword},sysdate,#{search_ip},#{userid})
		</if>
	</insert>
	
	
	
	
	
	
	
	<!--================================================================================================================================-->
	<!--====================================================== Search 끝=================================================================-->
	<!--================================================================================================================================-->
	
	
	
	
	
	
	
	
	<!--================================================================================================================================-->
	<!--====================================================== Admin 시작 =================================================================-->
	<!--================================================================================================================================-->
	
	<!-- 정지당한 회원 정지사유 얻기 -->
	<select id="getPenalty" parameterType="String" resultType="com.gukmo.board.model.PenaltyVO">
		select penalty_num,
	           nickname,
	           simple_penalty_reason,
	           detail_penalty_reason,
	           to_char(penalty_start_date,'yyyy-mm-dd') penalty_start_date,
	           penalty_period,
	           to_char(penalty_start_date+penalty_period,'yyyy-mm-dd') as penalty_end_date
	    from tbl_penalty
	    where nickname = #{nickname}
	</select>
	
	
	
	
	
	<!--================================================================================================================================-->
	<!--====================================================== Admin 끝 =================================================================-->
	<!--================================================================================================================================-->
	
	
</mapper>