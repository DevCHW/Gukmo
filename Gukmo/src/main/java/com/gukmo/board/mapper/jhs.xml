<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="jhs">

<!-- 	<select id="getMainBanner_advo" resultType="String">
		select advertisement_num, file_name, url, start_date, period, status
		from tbl_advertisement
		where division = '메인'
		order by advertisement_num
	</select> -->
	
	<!-- association 으로 선언된 AcademyVO 매핑 -->
	<resultMap id="academy" type="com.gukmo.board.model.AcademyVO">
		<id property="fk_board_num" column="fk_board_num"/><!-- property는 VO필드이름, column은 오라클 컬럼명 -->
		<result property="representative_name" column="representative_name" />
		<result property="address" column="address" />
		<result property="phone" column="phone" />
		<result property="jurisdiction" column="jurisdiction" />
		<result property="homepage" column="homepage" />
		<result property="academy_image" column="academy_image" />
	</resultMap>
	
	
	<!-- association 으로 선언된 CurriculumVO 매핑 -->
	<resultMap id="curriculum" type="com.gukmo.board.model.CurriculumVO">
		<id property="fk_board_num" column="fk_board_num"/><!-- property는 VO필드이름, column은 오라클 컬럼명 -->
		<result property="core_technology" column="core_technology" />
		<result property="academy_name" column="academy_name" />
		<result property="curriculum_start_date" column="curriculum_start_date" />
		<result property="curriculum_end_date" column="curriculum_end_date"	/>
		<result property="recruitment_end_date" column="recruitment_end_date" />
		<result property="join_url" column="join_url" />		
	</resultMap>
	

	<!-- 메인 게시판 영역 -->
	
	<select id="getTopSearchList" resultType="com.gukmo.board.model.SearchVO">
		select keyword, count
		from
		(
		    select rownum as rno, keyword, count
		    from
		    (
		        select keyword, count(*) as count
		        from tbl_search
		        where TO_CHAR(search_date, 'yyyymmdd') between TO_CHAR(TRUNC(sysdate,'iw')-7, 'yyyymmdd') and TO_CHAR(TRUNC(sysdate,'iw')-1, 'yyyymmdd')
		        group by keyword
		        order by count desc
		    )
		)
		where rno between 1 and 5
	</select>
	
	<!-- 학원 목록 불러오기 위한 mapping  -->
	<resultMap id="curriList" type="com.gukmo.board.model.BoardVO">
		<result property="board_num" column="board_num"/>
		<result property="subject" column="subject"/>
		<result property="dday" column="dday"/>
		<association property="curriculum" resultMap="curriculum"/>
	</resultMap>

 	<select id="getCurriList1" resultMap="curriList">
		select board_num, subject, academy_name, curriculum_start_date, curriculum_end_date, dday
        from
        (
            select rownum as rno, board_num, subject, academy_name,
                	trunc(recruitment_end_date - sysdate) as dday,
		       		to_char(curriculum_start_date, 'yyyy-mm-dd') as curriculum_start_date,
		       		to_char(curriculum_end_date, 'yyyy-mm-dd') as curriculum_end_date,
		       		to_char(recruitment_end_date, 'yyyy-mm-dd') as recruitment_end_date
            from tbl_curriculum join tbl_board
            on board_num = fk_board_num
            where to_char(sysdate,'yyyymmdd') between to_char(recruitment_start_date, 'yyyymmdd') and to_char(recruitment_end_date, 'yyyymmdd')
        )
        where rno between 1 and 8
	</select>
	
	<select id="getCurriList2" resultMap="curriList">
		select board_num, subject, academy_name, curriculum_start_date, curriculum_end_date, dday
        from
        (
            select rownum as rno, board_num, subject, academy_name,
                	trunc(recruitment_end_date - sysdate) as dday,
		       		to_char(curriculum_start_date, 'yyyy-mm-dd') as curriculum_start_date,
		       		to_char(curriculum_end_date, 'yyyy-mm-dd') as curriculum_end_date,
		       		to_char(recruitment_end_date, 'yyyy-mm-dd') as recruitment_end_date
            from tbl_curriculum join tbl_board
            on board_num = fk_board_num
            where to_char(sysdate,'yyyymmdd') between to_char(recruitment_start_date, 'yyyymmdd') and to_char(recruitment_end_date, 'yyyymmdd')
        )
        where rno between 9 and 16
	</select>
	
 	<select id="getCurriList3" resultMap="curriList">
		select board_num, subject, academy_name, curriculum_start_date, curriculum_end_date, dday
        from
        (
            select rownum as rno, board_num, subject, academy_name,
                	trunc(recruitment_end_date - sysdate) as dday,
		       		to_char(curriculum_start_date, 'yyyy-mm-dd') as curriculum_start_date,
		       		to_char(curriculum_end_date, 'yyyy-mm-dd') as curriculum_end_date,
		       		to_char(recruitment_end_date, 'yyyy-mm-dd') as recruitment_end_date
            from tbl_curriculum join tbl_board
            on board_num = fk_board_num
            where to_char(sysdate,'yyyymmdd') between to_char(recruitment_start_date, 'yyyymmdd') and to_char(recruitment_end_date, 'yyyymmdd')
        )
        where rno between 17 and 24
	</select>
	
	
	<select id="getCurriTotalCnt" resultType="int">
		select count(*)
		from tbl_curriculum join tbl_board
		on board_num = fk_board_num
		where to_char(sysdate, 'yyyy-mm-dd') &lt;= to_char(recruitment_end_date, 'yyyy-mm-dd')
			  and rownum between 1 and 24
	</select> 
	
	
	<select id ="getFreeBoardList" resultType="com.gukmo.board.model.BoardVO">
		select board_num,nickname, point as writer_point , profile_image,
		       detail_category , subject,
		       content , write_date, views, comment_cnt, like_cnt
		from
		(
		select board_num, B.nickname as nickname, M.point as point, M.profile_image as profile_image,
		       detail_category , subject,
		       content , write_date, views, comment_cnt, like_cnt
		from tbl_board B left join tbl_member M
		on B.nickname = M.nickname
		where detail_category = '자유게시판' 
		order by write_date desc
		)
		where rownum between 1 and 5
	</select>
	
	
	<select id ="getStudyBoardList" resultType="com.gukmo.board.model.BoardVO">
		select board_num,nickname, point as writer_point, profile_image,
		       detail_category , subject,
		       content , write_date, views, comment_cnt, like_cnt
		from
		(
		select board_num, B.nickname as nickname, M.point as point, M.profile_image as profile_image,
		       detail_category , subject,
		       content , write_date, views, comment_cnt, like_cnt
		from tbl_board B left join tbl_member M
		on B.nickname = M.nickname
		where detail_category = '스터디' 
		order by write_date desc
		)
		where rownum between 1 and 5
	</select>
	
	
	<select id ="getQnaBoardList" resultType="com.gukmo.board.model.BoardVO">
		select board_num,nickname, point as writer_point, profile_image,
		       detail_category , subject,
		       content , write_date, views, comment_cnt, like_cnt
		from
		(
		select board_num, B.nickname as nickname, M.point as point, M.profile_image as profile_image,
		       detail_category , subject,
		       content , write_date, views, comment_cnt, like_cnt
		from tbl_board B left join tbl_member M
		on B.nickname = M.nickname
		where detail_category = 'QnA' 
		order by write_date desc
		)
		where rownum between 1 and 5
	</select>
	
	
	<select id ="getReviewBoardList" resultType="com.gukmo.board.model.BoardVO">
		select board_num,nickname, point as writer_point, profile_image,
		       detail_category , subject,
		       content , write_date, views, comment_cnt, like_cnt
		from
		(
		select board_num, B.nickname as nickname, M.point as point, M.profile_image as profile_image,
		       detail_category , subject,
		       content , write_date, views, comment_cnt, like_cnt
		from tbl_board B left join tbl_member M
		on B.nickname = M.nickname
		where detail_category = '수강/취업후기' 
		order by write_date desc
		)
		where rownum between 1 and 5
	</select>
	
	
	
	
	
	<!-- 검색창 영역 -->

	<select id="getTopHashList" resultType="com.gukmo.board.model.HashtagVO">
		select hashtag_num, hashtag, count
        from
        (
            select rownum as rno, hashtag_num, hashtag, count
            from
            (
                select HM.hashtag_num as hashtag_num, hashtag, count
                from
                (
                    select hashtag_num, count(*) as count
                    from tbl_hashtag_board_map
                    where TO_CHAR(write_date, 'yyyymmdd') between TO_CHAR(TRUNC(sysdate,'iw')-7, 'yyyymmdd') and TO_CHAR(TRUNC(sysdate,'iw')-1, 'yyyymmdd')
                    group by hashtag_num
                ) HM left join tbl_hashtag H
                on HM.hashtag_num = H.hashtag_num
                order by count desc
            )
        )
		where rno between 1 and 3
	</select>


	<!-- 해시태그 검색용 mapping -->
	<resultMap id="searchList" type="com.gukmo.board.model.BoardVO">
		<id property="board_num" column="board_num"/>
		<result property="category" column="category" />
		<result property="detail_category" column="detail_category" />
		<result property="subject" column="subject"/>
		<result property="content" column="content"/>
		<result property="write_date" column="write_date"/>
		<association property="academy" resultMap="academy"/>
		<association property="curriculum" resultMap="curriculum"/>
		<collection property="hashtags" column="hashtag" javaType="java.util.ArrayList" ofType="com.gukmo.board.model.HashtagVO">
			<id property="hashtag" column="hashtag"/>
		</collection>
	</resultMap>
	
	<select id ="getTotalCnt" parameterType="HashMap" resultType="int">
	    
	    <if test='hashtag != ""'>
	    select rno
	    from 
	    (
	    	select dense_rank()OVER (order by board_num desc) rno,
		           board_num, subject, content, category, detail_category,
		           NH.hashtag as hashtag, HB.write_date as write_date
		    from
		    (
		        select board_num, subject, content, category, detail_category, B.write_date as write_date
		        from tbl_board B left join tbl_hashtag_board_map HM
		        on board_num = fk_board_num left join tbl_hashtag H
		        on HM.hashtag_num = H.hashtag_num
		        where hashtag like '%'||lower(#{searchWord})||'%'
		    ) HB join tbl_hashtag_board_map NHM
		    on board_num = fk_board_num join tbl_hashtag NH
		    on NHM.hashtag_num = NH.hashtag_num
		    order by rno desc
		)V
		where rownum = 1
	    </if>
	    
	    <if test='hashtag == ""'>
	    select rno
	    from(
    		select dense_rank()OVER (order by board_num desc) rno,
			       board_num, subject, content, category, detail_category, hashtag, write_date, -- 게시판 글
			       representative_name, address, phone, jurisdiction, homepage, academy_image, -- 학원 글
			       core_technology, academy_name, curriculum_start_date, curriculum_end_date, recruitment_end_date, join_url -- 과정 글
			from
			(
                select B.board_num as board_num, subject, content, category, detail_category, hashtag, B.write_date as write_date
                from tbl_board B join
                (
                    select board_num
                    from tbl_board B left join tbl_hashtag_board_map HM
                    on board_num = fk_board_num left join tbl_hashtag H
                    on HM.hashtag_num = H.hashtag_num
                    where 1=1
                    <if test= 'searchWord != ""'>
						and subject like '%'||lower(#{searchWord})||'%'
					    or content like '%'||lower(#{searchWord})||'%'
					    or hashtag like '%'||lower(#{searchWord})||'%'
					</if>
                    group by board_num
                ) only_BN 
                on B.board_num = only_BN.board_num left join tbl_hashtag_board_map NHM
                on B.board_num = NHM.fk_board_num left join tbl_hashtag NH
                on NHM.hashtag_num = NH.hashtag_num
            ) join_BH
            left join
            (
                select fk_board_num, representative_name, address, phone, jurisdiction, homepage, academy_image
                from tbl_academy
            ) A
            on join_BH.board_num = A.fk_board_num
            left join
            ( 
                select fk_board_num, core_technology, academy_name, curriculum_start_date, curriculum_end_date, recruitment_end_date, join_url                    from tbl_curriculum
            ) C
            on join_BH.board_num = C.fk_board_num
	        order by rno desc
	    )V
	    where rownum = 1
	    </if>
	</select>
	
	

	<select id = "getSearchList" parameterType="HashMap" resultMap="searchList">
		<if test='hashtag != ""'>
		select board_num, category, detail_category, subject, content, hashtag, write_date -- 게시판 글
	    from 
	    (
	    	select dense_rank()OVER (order by board_num desc) rno,
		           board_num, subject, content, category, detail_category,
		           NH.hashtag as hashtag, HB.write_date as write_date
		    from
		    (
		        select board_num, subject, content, category, detail_category, B.write_date as write_date
		        from tbl_board B left join tbl_hashtag_board_map HM
		        on board_num = fk_board_num left join tbl_hashtag H
		        on HM.hashtag_num = H.hashtag_num
		        where hashtag like '%'||lower(#{searchWord})||'%'
		    ) HB join tbl_hashtag_board_map NHM
		    on board_num = fk_board_num join tbl_hashtag NH
		    on NHM.hashtag_num = NH.hashtag_num
		    order by board_num desc
		)V
		where rno between #{startRno} and #{endRno}
		</if>
		
		<if test='hashtag == ""'>
		select board_num, category, detail_category, subject, content, hashtag, write_date, -- 게시판 글
            	representative_name, address, phone, jurisdiction, homepage, academy_image, -- 학원 글
            	core_technology, academy_name, to_char(curriculum_start_date,'yyyy-mm-dd') as curriculum_start_date,
            	to_char(curriculum_end_date,'yyyy-mm-dd') as curriculum_end_date,
            	to_char(recruitment_end_date,'yyyy-mm-dd') as recruitment_end_date, join_url -- 과정 글
		from(
    		select dense_rank()OVER (order by board_num desc) rno,
			       board_num, subject, content, category, detail_category, hashtag, write_date, -- 게시판 글
			       representative_name, address, phone, jurisdiction, homepage, academy_image, -- 학원 글
			       core_technology, academy_name, curriculum_start_date, curriculum_end_date, recruitment_end_date, join_url -- 과정 글
			from
			(
                select B.board_num as board_num, subject, content, category, detail_category, hashtag, B.write_date as write_date
                from tbl_board B join
                (
                    select board_num
                    from tbl_board B left join tbl_hashtag_board_map HM
                    on board_num = fk_board_num left join tbl_hashtag H
                    on HM.hashtag_num = H.hashtag_num
                    where 1=1
                    <if test= 'searchWord != ""'>
						and subject like '%'||lower(#{searchWord})||'%'
					    or content like '%'||lower(#{searchWord})||'%'
					    or hashtag like '%'||lower(#{searchWord})||'%'
					</if>
                    group by board_num
                ) only_BN 
                on B.board_num = only_BN.board_num left join tbl_hashtag_board_map NHM
                on B.board_num = NHM.fk_board_num left join tbl_hashtag NH
                on NHM.hashtag_num = NH.hashtag_num
            ) join_BH
            left join
            (
                select fk_board_num, representative_name, address, phone, jurisdiction, homepage, academy_image
                from tbl_academy
            ) A
            on join_BH.board_num = A.fk_board_num
            left join
            ( 
                select fk_board_num, core_technology, academy_name, curriculum_start_date, curriculum_end_date, recruitment_end_date, join_url                    from tbl_curriculum
            ) C
            on join_BH.board_num = C.fk_board_num
            order by board_num desc
		)V
		where rno between #{startRno} and #{endRno}
		</if>
	</select>




	<!-- association 으로 선언된 CommentVO 매핑 
	<resultMap id="comment" type="com.gukmo.board.model.CommentVO">
		<result property="cmt_board_num" column="alarm_board_num" />
		<result property="parent_write_nickname" column="alarm_nickname" />	
	</resultMap>
	
	
	<resultMap id="alarmList" type="com.gukmo.board.model.AlarmVO">
		<id property="alarm_num" column="alarmno"/>
		<result property="cmd" column="cmd"/>
		<result property="alarm_nickname" column="alarm_nickname"/>
		<result property="subject" column="subject"/>
		<result property="cmt_content" column="cmt_content"/>
	</resultMap>


	<insert id="setAlarm" parameterType="HashMap">

			insert into tbl_alarm (ALARMNO, alarm_board_num ,alarm_comment_num, alarm_userid, cmd, alarm_date, isread )
			values (seq_alarm.nextval, #{board_num},'{#comment_num}', #{userid}, ${cmd}, sysdate, 'n' )

	</insert>

	<select id="notReadAlarmList" parameterType="HashMap" resultMap="alarmList" >
		select alarmno, alarm_board_num , subject, alarm_comment_num, content, alarm_userid, cmd, alarm_date, isread
        from
		(
        	select alarmno, alarm_board_num , subject, alarm_comment_num, alarm_userid, cmd, alarm_date, isread
			from tbl_alarm A join tbl_board B
			on A.alarm_board_num = B.board_num
        ) left join tbl_comment C
        on alarm_comment_num = comment_num
		where isread = 'n' and alarm_userid = #{userid}
	</select>

	<select id="getAlarm" parameterType="HashMap" resultMap="alarmList" >
		select alarmno, alarm_board_num , subject, alarm_comment_num, content, alarm_userid, cmd, alarm_date, isread
        from
		(
        	select alarmno, alarm_board_num , subject, alarm_comment_num, alarm_userid, cmd, alarm_date, isread
			from tbl_alarm A join tbl_board B
			on A.alarm_board_num = B.board_num
        ) left join tbl_comment C
        on alarm_comment_num = comment_num
        alarm_userid = #{userid}
	</select>	
	
	<update id="changeIsRead" parameterType="String">
		update tbl_alarm set isread = 'y'
		where alarmno = #{alarm_num}
	</update>

-->

</mapper>